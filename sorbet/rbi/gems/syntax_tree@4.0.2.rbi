# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `syntax_tree` gem.
# Please instead update this file by running `bin/tapioca gem syntax_tree`.

# Syntax Tree is a suite of tools built on top of the internal CRuby parser. It
# provides the ability to generate a syntax tree from source, as well as the
# tools necessary to inspect and manipulate that syntax tree. It can be used to
# build formatters, linters, language servers, and more.
#
# source://syntax_tree//lib/syntax_tree/formatter.rb#3
module SyntaxTree
  class << self
    # Parses the given source and returns the formatted source.
    #
    # source://syntax_tree//lib/syntax_tree.rb#54
    def format(source, maxwidth = T.unsafe(nil)); end

    # Parses the given source and returns the syntax tree.
    #
    # source://syntax_tree//lib/syntax_tree.rb#47
    def parse(source); end

    # Returns the source from the given filepath taking into account any potential
    # magic encoding comments.
    #
    # source://syntax_tree//lib/syntax_tree.rb#64
    def read(filepath); end

    # This is a hook provided so that plugins can register themselves as the
    # handler for a particular file type.
    #
    # source://syntax_tree//lib/syntax_tree.rb#42
    def register_handler(extension, handler); end
  end
end

# ARef represents when you're pulling a value out of a collection at a
# specific index. Put another way, it's any time you're calling the method
# #[].
#
#     collection[index]
#
# The nodes usually contains two children, the collection and the index. In
# some cases, you don't necessarily have the second child node, because you
# can call procs with a pretty esoteric syntax. In the following example, you
# wouldn't have a second child node:
#
#     collection[]
#
# source://syntax_tree//lib/syntax_tree/node.rb#447
class SyntaxTree::ARef < ::SyntaxTree::Node
  # @return [ARef] a new instance of ARef
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#456
  def initialize(collection:, index:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#463
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#467
  def child_nodes; end

  # [untyped] the value being indexed
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#448
  def collection; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#454
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#467
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#473
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#482
  def format(q); end

  # [nil | Args] the value being passed within the brackets
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#451
  def index; end
end

# ARefField represents assigning values into collections at specific indices.
# Put another way, it's any time you're calling the method #[]=. The
# ARefField node itself is just the left side of the assignment, and they're
# always wrapped in assign nodes.
#
#     collection[index] = value
#
# source://syntax_tree//lib/syntax_tree/node.rb#508
class SyntaxTree::ARefField < ::SyntaxTree::Node
  # @return [ARefField] a new instance of ARefField
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#517
  def initialize(collection:, index:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#524
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#528
  def child_nodes; end

  # [untyped] the value being indexed
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#509
  def collection; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#515
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#528
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#534
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#543
  def format(q); end

  # [nil | Args] the value being passed within the brackets
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#512
  def index; end
end

# Alias represents the use of the +alias+ keyword with regular arguments (not
# global variables). The +alias+ keyword is used to make a method respond to
# another name as well as the current one.
#
#     alias aliased_name name
#
# For the example above, in the current context you can now call aliased_name
# and it will execute the name method. When you're aliasing two methods, you
# can either provide bare words (like the example above) or you can provide
# symbols (note that this includes dynamic symbols like
# :"left-#{middle}-right").
#
# source://syntax_tree//lib/syntax_tree/node.rb#360
class SyntaxTree::Alias < ::SyntaxTree::Node
  # @return [Alias] a new instance of Alias
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#395
  def initialize(left:, right:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#402
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#406
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#393
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#406
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#412
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#416
  def format(q); end

  # [DynaSymbol | SymbolLiteral] the new name of the method
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#387
  def left; end

  # [DynaSymbol | SymbolLiteral] the old name of the method
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#390
  def right; end
end

# Formats an argument to the alias keyword. For symbol literals it uses the
# value of the symbol directly to look like bare words.
#
# source://syntax_tree//lib/syntax_tree/node.rb#361
class SyntaxTree::Alias::AliasArgumentFormatter
  # @return [AliasArgumentFormatter] a new instance of AliasArgumentFormatter
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#365
  def initialize(argument); end

  # [DynaSymbol | SymbolLiteral] the argument being passed to alias
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#363
  def argument; end

  # source://syntax_tree//lib/syntax_tree/node.rb#369
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#377
  def format(q); end
end

# ArgBlock represents using a block operator on an expression.
#
#     method(&expression)
#
# source://syntax_tree//lib/syntax_tree/node.rb#683
class SyntaxTree::ArgBlock < ::SyntaxTree::Node
  # @return [ArgBlock] a new instance of ArgBlock
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#689
  def initialize(value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#695
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#699
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#687
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#699
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#705
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#709
  def format(q); end

  # [nil | untyped] the expression being turned into a block
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#684
  def value; end
end

# ArgParen represents wrapping arguments to a method inside a set of
# parentheses.
#
#     method(argument)
#
# In the example above, there would be an ArgParen node around the Args node
# that represents the set of arguments being sent to the method method. The
# argument child node can be +nil+ if no arguments were passed, as in:
#
#     method()
#
# source://syntax_tree//lib/syntax_tree/node.rb#574
class SyntaxTree::ArgParen < ::SyntaxTree::Node
  # @return [ArgParen] a new instance of ArgParen
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#580
  def initialize(arguments:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#586
  def accept(visitor); end

  # [nil | Args | ArgsForward] the arguments inside the
  # parentheses
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#575
  def arguments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#590
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#578
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#590
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#596
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#600
  def format(q); end

  private

  # @return [Boolean]
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#620
  def trailing_comma?; end
end

# Star represents using a splat operator on an expression.
#
#     method(*arguments)
#
# source://syntax_tree//lib/syntax_tree/node.rb#720
class SyntaxTree::ArgStar < ::SyntaxTree::Node
  # @return [ArgStar] a new instance of ArgStar
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#726
  def initialize(value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#732
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#736
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#724
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#736
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#742
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#746
  def format(q); end

  # [nil | untyped] the expression being splatted
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#721
  def value; end
end

# Args represents a list of arguments being passed to a method call or array
# literal.
#
#     method(first, second, third)
#
# source://syntax_tree//lib/syntax_tree/node.rb#647
class SyntaxTree::Args < ::SyntaxTree::Node
  # @return [Args] a new instance of Args
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#653
  def initialize(parts:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#659
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#663
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#651
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#663
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#669
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#673
  def format(q); end

  # [Array[ untyped ]] the arguments that this node wraps
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#648
  def parts; end
end

# ArgsForward represents forwarding all kinds of arguments onto another method
# call.
#
#     def request(method, path, **headers, &block); end
#
#     def get(...)
#       request(:GET, ...)
#     end
#
#     def post(...)
#       request(:POST, ...)
#     end
#
# In the example above, both the get and post methods are forwarding all of
# their arguments (positional, keyword, and block) on to the request method.
# The ArgsForward node appears in both the caller (the request method calls)
# and the callee (the get and post definitions).
#
# source://syntax_tree//lib/syntax_tree/node.rb#770
class SyntaxTree::ArgsForward < ::SyntaxTree::Node
  # @return [ArgsForward] a new instance of ArgsForward
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#776
  def initialize(value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#782
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#786
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#774
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#786
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#792
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#796
  def format(q); end

  # [String] the value of the operator
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#771
  def value; end
end

# ArrayLiteral represents an array literal, which can optionally contain
# elements.
#
#     []
#     [one, two, three]
#
# source://syntax_tree//lib/syntax_tree/node.rb#810
class SyntaxTree::ArrayLiteral < ::SyntaxTree::Node
  # @return [ArrayLiteral] a new instance of ArrayLiteral
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#958
  def initialize(lbracket:, contents:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#965
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#969
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#956
  def comments; end

  # [nil | Args] the contents of the array
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#953
  def contents; end

  # source://syntax_tree//lib/syntax_tree/node.rb#969
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#975
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#984
  def format(q); end

  # [LBracket] the bracket that opens this array
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#950
  def lbracket; end

  private

  # If we have an empty array that contains only comments, then we're going
  # to do some special printing to ensure they get indented correctly.
  #
  # @return [Boolean]
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1061
  def empty_with_comments?; end

  # @return [Boolean]
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1040
  def qsymbols?; end

  # @return [Boolean]
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1023
  def qwords?; end

  # @return [Boolean]
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1048
  def var_refs?(q); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#817
SyntaxTree::ArrayLiteral::BREAKABLE_SPACE_SEPARATOR = T.let(T.unsafe(nil), SyntaxTree::ArrayLiteral::BreakableSpaceSeparator)

# It's very common to use seplist with ->(q) { q.breakable_space }. We wrap
# that pattern into an object to cut down on having to create a bunch of
# lambdas all over the place.
#
# source://syntax_tree//lib/syntax_tree/node.rb#811
class SyntaxTree::ArrayLiteral::BreakableSpaceSeparator
  # source://syntax_tree//lib/syntax_tree/node.rb#812
  def call(q); end
end

# This is a special formatter used if the array literal contains no values
# but _does_ contain comments. In this case we do some special formatting to
# make sure the comments gets indented properly.
#
# source://syntax_tree//lib/syntax_tree/node.rb#926
class SyntaxTree::ArrayLiteral::EmptyWithCommentsFormatter
  # @return [EmptyWithCommentsFormatter] a new instance of EmptyWithCommentsFormatter
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#930
  def initialize(lbracket); end

  # source://syntax_tree//lib/syntax_tree/node.rb#934
  def format(q); end

  # [LBracket] the opening bracket
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#928
  def lbracket; end
end

# Formats an array of multiple simple symbol literals into the %i syntax.
#
# source://syntax_tree//lib/syntax_tree/node.rb#848
class SyntaxTree::ArrayLiteral::QSymbolsFormatter
  # @return [QSymbolsFormatter] a new instance of QSymbolsFormatter
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#852
  def initialize(contents); end

  # [Args] the contents of the array
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#850
  def contents; end

  # source://syntax_tree//lib/syntax_tree/node.rb#856
  def format(q); end
end

# Formats an array of multiple simple string literals into the %w syntax.
#
# source://syntax_tree//lib/syntax_tree/node.rb#820
class SyntaxTree::ArrayLiteral::QWordsFormatter
  # @return [QWordsFormatter] a new instance of QWordsFormatter
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#824
  def initialize(contents); end

  # [Args] the contents of the array
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#822
  def contents; end

  # source://syntax_tree//lib/syntax_tree/node.rb#828
  def format(q); end
end

# Formats an array that contains only a list of variable references. To make
# things simpler, if there are a bunch, we format them all using the "fill"
# algorithm as opposed to breaking them into a ton of lines. For example,
#
#     [foo, bar, baz]
#
# instead of becoming:
#
#     [
#       foo,
#       bar,
#       baz
#     ]
#
# would instead become:
#
#     [
#       foo, bar,
#       baz
#     ]
#
# provided the line length was hit between `bar` and `baz`.
#
# source://syntax_tree//lib/syntax_tree/node.rb#893
class SyntaxTree::ArrayLiteral::VarRefsFormatter
  # @return [VarRefsFormatter] a new instance of VarRefsFormatter
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#905
  def initialize(contents); end

  # [Args] the contents of the array
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#903
  def contents; end

  # source://syntax_tree//lib/syntax_tree/node.rb#909
  def format(q); end
end

# The separator for the fill algorithm.
#
# source://syntax_tree//lib/syntax_tree/node.rb#895
class SyntaxTree::ArrayLiteral::VarRefsFormatter::Separator
  # source://syntax_tree//lib/syntax_tree/node.rb#896
  def call(q); end
end

# AryPtn represents matching against an array pattern using the Ruby 2.7+
# pattern matching syntax. It’s one of the more complicated nodes, because
# the four parameters that it accepts can almost all be nil.
#
#     case [1, 2, 3]
#     in [Integer, Integer]
#       "matched"
#     in Container[Integer, Integer]
#       "matched"
#     in [Integer, *, Integer]
#       "matched"
#     end
#
# An AryPtn node is created with four parameters: an optional constant
# wrapper, an array of positional matches, an optional splat with identifier,
# and an optional array of positional matches that occur after the splat.
# All of the in clauses above would create an AryPtn node.
#
# source://syntax_tree//lib/syntax_tree/node.rb#1085
class SyntaxTree::AryPtn < ::SyntaxTree::Node
  # @return [AryPtn] a new instance of AryPtn
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1122
  def initialize(constant:, requireds:, rest:, posts:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1138
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1142
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1120
  def comments; end

  # [nil | VarRef] the optional constant wrapper
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1105
  def constant; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1142
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1148
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1159
  def format(q); end

  # [Array[ untyped ]] the list of positional arguments occurring after the
  # optional star if there is one
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1117
  def posts; end

  # [Array[ untyped ]] the regular positional arguments that this array
  # pattern is matching against
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1109
  def requireds; end

  # [nil | VarField] the optional starred identifier that grabs up a list of
  # positional arguments
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1113
  def rest; end
end

# Formats the optional splat of an array pattern.
#
# source://syntax_tree//lib/syntax_tree/node.rb#1086
class SyntaxTree::AryPtn::RestFormatter
  # @return [RestFormatter] a new instance of RestFormatter
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1090
  def initialize(value); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1094
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1098
  def format(q); end

  # [VarField] the identifier that represents the remaining positionals
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1088
  def value; end
end

# Assign represents assigning something to a variable or constant. Generally,
# the left side of the assignment is going to be any node that ends with the
# name "Field".
#
#     variable = value
#
# source://syntax_tree//lib/syntax_tree/node.rb#1203
class SyntaxTree::Assign < ::SyntaxTree::Node
  # @return [Assign] a new instance of Assign
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1212
  def initialize(target:, value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1219
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1223
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1210
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1223
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1229
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1233
  def format(q); end

  # [ARefField | ConstPathField | Field | TopConstField | VarField] the target
  # to assign the result of the expression to
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1204
  def target; end

  # [untyped] the expression to be assigned
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1207
  def value; end

  private

  # @return [Boolean]
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1252
  def skip_indent?; end
end

# Determins if the following value should be indented or not.
#
# source://syntax_tree//lib/syntax_tree/node.rb#1179
module SyntaxTree::AssignFormatting
  class << self
    # @return [Boolean]
    #
    # source://syntax_tree//lib/syntax_tree/node.rb#1180
    def skip_indent?(value); end
  end
end

# Assoc represents a key-value pair within a hash. It is a child node of
# either an AssocListFromArgs or a BareAssocHash.
#
#     { key1: value1, key2: value2 }
#
# In the above example, the would be two AssocNew nodes.
#
# source://syntax_tree//lib/syntax_tree/node.rb#1265
class SyntaxTree::Assoc < ::SyntaxTree::Node
  # @return [Assoc] a new instance of Assoc
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1274
  def initialize(key:, value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1281
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1285
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1272
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1285
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1291
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1295
  def format(q); end

  # [untyped] the key of this pair
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1266
  def key; end

  # [untyped] the value of this pair
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1269
  def value; end

  private

  # source://syntax_tree//lib/syntax_tree/node.rb#1305
  def format_contents(q); end
end

# AssocSplat represents double-splatting a value into a hash (either a hash
# literal or a bare hash in a method call).
#
#     { **pairs }
#
# source://syntax_tree//lib/syntax_tree/node.rb#1327
class SyntaxTree::AssocSplat < ::SyntaxTree::Node
  # @return [AssocSplat] a new instance of AssocSplat
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1333
  def initialize(value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1339
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1343
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1331
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1343
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1349
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1353
  def format(q); end

  # [untyped] the expression that is being splatted
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1328
  def value; end
end

# BEGINBlock represents the use of the +BEGIN+ keyword, which hooks into the
# lifecycle of the interpreter. Whatever is inside the block will get executed
# when the program starts.
#
#     BEGIN {
#     }
#
# Interestingly, the BEGIN keyword doesn't allow the do and end keywords for
# the block. Only braces are permitted.
#
# source://syntax_tree//lib/syntax_tree/node.rb#140
class SyntaxTree::BEGINBlock < ::SyntaxTree::Node
  # @return [BEGINBlock] a new instance of BEGINBlock
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#149
  def initialize(lbrace:, statements:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#156
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#160
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#147
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#160
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#166
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#175
  def format(q); end

  # [LBrace] the left brace that is seen after the keyword
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#141
  def lbrace; end

  # [Statements] the expressions to be executed
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#144
  def statements; end
end

# Backref represents a global variable referencing a matched value. It comes
# in the form of a $ followed by a positive integer.
#
#     $1
#
# source://syntax_tree//lib/syntax_tree/node.rb#1365
class SyntaxTree::Backref < ::SyntaxTree::Node
  # @return [Backref] a new instance of Backref
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1371
  def initialize(value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1377
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1381
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1369
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1381
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1387
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1391
  def format(q); end

  # [String] the name of the global backreference variable
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1366
  def value; end
end

# Backtick represents the use of the ` operator. It's usually found being used
# for an XStringLiteral, but could also be found as the name of a method being
# defined.
#
# source://syntax_tree//lib/syntax_tree/node.rb#1400
class SyntaxTree::Backtick < ::SyntaxTree::Node
  # @return [Backtick] a new instance of Backtick
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1406
  def initialize(value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1412
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1416
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1404
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1416
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1422
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1426
  def format(q); end

  # [String] the backtick in the string
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1401
  def value; end
end

# BareAssocHash represents a hash of contents being passed as a method
# argument (and therefore has omitted braces). It's very similar to an
# AssocListFromArgs node.
#
#     method(key1: value1, key2: value2)
#
# source://syntax_tree//lib/syntax_tree/node.rb#1512
class SyntaxTree::BareAssocHash < ::SyntaxTree::Node
  # @return [BareAssocHash] a new instance of BareAssocHash
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1518
  def initialize(assocs:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1524
  def accept(visitor); end

  # [Array[ Assoc | AssocSplat ]]
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1513
  def assocs; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1528
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1516
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1528
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1534
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1538
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1542
  def format_key(q, key); end
end

# BasicVisitor is the parent class of the Visitor class that provides the
# ability to walk down the tree. It does not define any handlers, so you
# should extend this class if you want your visitor to raise an error if you
# attempt to visit a node that you don't handle.
#
# source://syntax_tree//lib/syntax_tree/basic_visitor.rb#8
class SyntaxTree::BasicVisitor
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#66
  def visit(node); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#70
  def visit_all(nodes); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_child_nodes(node); end

  class << self
    # This method is here to help folks write visitors.
    #
    # It's not always easy to ensure you're writing the correct method name in
    # the visitor since it's perfectly valid to define methods that don't
    # override these parent methods.
    #
    # If you use this method, you can ensure you're writing the correct method
    # name. It will raise an error if the visit method you're defining isn't
    # actually a method on the parent visitor.
    #
    # @raise [VisitMethodError]
    #
    # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#53
    def visit_method(method_name); end

    # This is the list of all of the valid visit methods.
    #
    # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#60
    def visit_methods; end
  end
end

# This class is used by DidYouMean to offer corrections to invalid visit
# method names.
#
# source://syntax_tree//lib/syntax_tree/basic_visitor.rb#22
class SyntaxTree::BasicVisitor::VisitMethodChecker
  # @return [VisitMethodChecker] a new instance of VisitMethodChecker
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#25
  def initialize(error); end

  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#29
  def corrections; end

  # Returns the value of attribute visit_method.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#23
  def visit_method; end
end

# This is raised when you use the Visitor.visit_method method and it fails.
# It is correctable to through DidYouMean.
#
# source://syntax_tree//lib/syntax_tree/basic_visitor.rb#11
class SyntaxTree::BasicVisitor::VisitMethodError < ::StandardError
  include ::DidYouMean::Correctable

  # @return [VisitMethodError] a new instance of VisitMethodError
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#14
  def initialize(visit_method); end

  # Returns the value of attribute visit_method.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#12
  def visit_method; end
end

# Begin represents a begin..end chain.
#
#     begin
#       value
#     end
#
# source://syntax_tree//lib/syntax_tree/node.rb#1554
class SyntaxTree::Begin < ::SyntaxTree::Node
  # @return [Begin] a new instance of Begin
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1560
  def initialize(bodystmt:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1566
  def accept(visitor); end

  # [BodyStmt] the bodystmt that contains the contents of this begin block
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1555
  def bodystmt; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1570
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1558
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1570
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1576
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1580
  def format(q); end
end

# Binary represents any expression that involves two sub-expressions with an
# operator in between. This can be something that looks like a mathematical
# operation:
#
#     1 + 1
#
# but can also be something like pushing a value onto an array:
#
#     array << value
#
# source://syntax_tree//lib/syntax_tree/node.rb#1657
class SyntaxTree::Binary < ::SyntaxTree::Node
  # @return [Binary] a new instance of Binary
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1680
  def initialize(left:, operator:, right:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1688
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1692
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1678
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1692
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1698
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1708
  def format(q); end

  # [untyped] the left-hand side of the expression
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1669
  def left; end

  # [Symbol] the operator used between the two expressions
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1672
  def operator; end

  # [untyped] the right-hand side of the expression
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1675
  def right; end
end

# BlockArg represents declaring a block parameter on a method definition.
#
#     def method(&block); end
#
# source://syntax_tree//lib/syntax_tree/node.rb#1800
class SyntaxTree::BlockArg < ::SyntaxTree::Node
  # @return [BlockArg] a new instance of BlockArg
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1806
  def initialize(name:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1812
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1816
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1804
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1816
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1822
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1826
  def format(q); end

  # [nil | Ident] the name of the block argument
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1801
  def name; end
end

# Responsible for formatting either a BraceBlock or a DoBlock.
#
# source://syntax_tree//lib/syntax_tree/node.rb#1961
class SyntaxTree::BlockFormatter
  # @return [BlockFormatter] a new instance of BlockFormatter
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1996
  def initialize(node, block_open, block_close, statements); end

  # [String] the string that closes the block
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1991
  def block_close; end

  # [LBrace | Keyword] the node that opens the block
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1988
  def block_open; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2003
  def format(q); end

  # [BraceBlock | DoBlock] the block node to be formatted
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1985
  def node; end

  # [BodyStmt | Statements] the statements inside the block
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1994
  def statements; end

  private

  # If we're the predicate of a loop or conditional, then we're going to have
  # to go with the {..} bounds.
  #
  # @return [Boolean]
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2067
  def forced_brace_bounds?(q); end

  # If we're a sibling of a control-flow keyword, then we're going to have to
  # use the do..end bounds.
  #
  # @return [Boolean]
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2056
  def forced_do_end_bounds?(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2084
  def format_break(q, opening, closing); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2104
  def format_flat(q, opening, closing); end

  # If this is nested anywhere inside certain nodes, then we can't change
  # which operators/keywords we're using for the bounds of the block.
  #
  # @return [Boolean]
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2038
  def unchangeable_bounds?(q); end
end

# Formats the opening brace or keyword of a block.
#
# source://syntax_tree//lib/syntax_tree/node.rb#1963
class SyntaxTree::BlockFormatter::BlockOpenFormatter
  # @return [BlockOpenFormatter] a new instance of BlockOpenFormatter
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1970
  def initialize(text, node); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1975
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1979
  def format(q); end

  # [LBrace | Keyword] the node that is being represented
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1968
  def node; end

  # [String] the actual output that should be printed
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1965
  def text; end
end

# BlockVar represents the parameters being declared for a block. Effectively
# this node is everything contained within the pipes. This includes all of the
# various parameter types, as well as block-local variable declarations.
#
#     method do |positional, optional = value, keyword:, &block; local|
#     end
#
# source://syntax_tree//lib/syntax_tree/node.rb#1739
class SyntaxTree::BlockVar < ::SyntaxTree::Node
  # @return [BlockVar] a new instance of BlockVar
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1748
  def initialize(params:, locals:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1755
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1759
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1746
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1759
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1765
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1781
  def format(q); end

  # [Array[ Ident ]] the list of block-local variable declarations
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1743
  def locals; end

  # [Params] the parameters being declared with the block
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1740
  def params; end
end

# We'll keep a single instance of this separator around for all block vars
# to cut down on allocations.
#
# source://syntax_tree//lib/syntax_tree/node.rb#1779
SyntaxTree::BlockVar::SEPARATOR = T.let(T.unsafe(nil), SyntaxTree::BlockVar::Separator)

# Within the pipes of the block declaration, we don't want any spaces. So
# we'll separate the parameters with a comma and space but no breakables.
#
# source://syntax_tree//lib/syntax_tree/node.rb#1771
class SyntaxTree::BlockVar::Separator
  # source://syntax_tree//lib/syntax_tree/node.rb#1772
  def call(q); end
end

# bodystmt can't actually determine its bounds appropriately because it
# doesn't necessarily know where it started. So the parent node needs to
# report back down into this one where it goes.
#
# source://syntax_tree//lib/syntax_tree/node.rb#1836
class SyntaxTree::BodyStmt < ::SyntaxTree::Node
  # @return [BodyStmt] a new instance of BodyStmt
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1854
  def initialize(statements:, rescue_clause:, else_keyword:, else_clause:, ensure_clause:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1906
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1872
  def bind(start_char, start_column, end_char, end_column); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1910
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1852
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1910
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1916
  def deconstruct_keys(_keys); end

  # [nil | Statements] the optional set of statements inside the else clause
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1846
  def else_clause; end

  # [nil | Kw] the optional else keyword
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1843
  def else_keyword; end

  # @return [Boolean]
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1902
  def empty?; end

  # [nil | Ensure] the optional ensure clause
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1849
  def ensure_clause; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1927
  def format(q); end

  # [nil | Rescue] the optional rescue chain attached to the begin clause
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1840
  def rescue_clause; end

  # [Statements] the list of statements inside the begin clause
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1837
  def statements; end
end

# BraceBlock represents passing a block to a method call using the { }
# operators.
#
#     method { |variable| variable + 1 }
#
# source://syntax_tree//lib/syntax_tree/node.rb#2132
class SyntaxTree::BraceBlock < ::SyntaxTree::Node
  # @return [BraceBlock] a new instance of BraceBlock
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2144
  def initialize(lbrace:, block_var:, statements:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2152
  def accept(visitor); end

  # [nil | BlockVar] the optional set of parameters to the block
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2136
  def block_var; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2156
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2142
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2156
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2162
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2172
  def format(q); end

  # [LBrace] the left brace that opens this block
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2133
  def lbrace; end

  # [Statements] the list of expressions to evaluate within the block
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2139
  def statements; end
end

# Break represents using the +break+ keyword.
#
#     break
#
# It can also optionally accept arguments, as in:
#
#     break 1
#
# source://syntax_tree//lib/syntax_tree/node.rb#2368
class SyntaxTree::Break < ::SyntaxTree::Node
  # @return [Break] a new instance of Break
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2374
  def initialize(arguments:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2380
  def accept(visitor); end

  # [Args] the arguments being sent to the keyword
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2369
  def arguments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2384
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2372
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2384
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2390
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2394
  def format(q); end
end

# CHAR irepresents a single codepoint in the script encoding.
#
#     ?a
#
# In the example above, the CHAR node represents the string literal "a". You
# can use control characters with this as well, as in ?\C-a.
#
# source://syntax_tree//lib/syntax_tree/node.rb#196
class SyntaxTree::CHAR < ::SyntaxTree::Node
  # @return [CHAR] a new instance of CHAR
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#202
  def initialize(value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#208
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#212
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#200
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#212
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#218
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#222
  def format(q); end

  # [String] the value of the character literal
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#197
  def value; end
end

# CVar represents the use of a class variable.
#
#     @@variable
#
# source://syntax_tree//lib/syntax_tree/node.rb#3490
class SyntaxTree::CVar < ::SyntaxTree::Node
  # @return [CVar] a new instance of CVar
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3496
  def initialize(value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3502
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3506
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3494
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3506
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3512
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3516
  def format(q); end

  # [String] the name of the class variable
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3491
  def value; end
end

# Call represents a method call.
#
#     receiver.message
#
# source://syntax_tree//lib/syntax_tree/node.rb#2647
class SyntaxTree::Call < ::SyntaxTree::Node
  # @return [Call] a new instance of Call
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2662
  def initialize(receiver:, operator:, message:, arguments:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2678
  def accept(visitor); end

  # [nil | ArgParen | Args] the arguments to the method call
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2657
  def arguments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2682
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2660
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2682
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2693
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2704
  def format(q); end

  # Print out the arguments to this call. If there are no arguments, then do
  # nothing.
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2722
  def format_arguments(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2732
  def format_contents(q); end

  # [:call | Backtick | Const | Ident | Op] the message being sent
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2654
  def message; end

  # [:"::" | Op | Period] the operator being used to send the message
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2651
  def operator; end

  # [untyped] the receiver of the method call
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2648
  def receiver; end
end

# This is probably the most complicated formatter in this file. It's
# responsible for formatting chains of method calls, with or without arguments
# or blocks. In general, we want to go from something like
#
#     foo.bar.baz
#
# to
#
#     foo
#       .bar
#       .baz
#
# Of course there are a lot of caveats to that, including trailing operators
# when necessary, where comments are places, how blocks are aligned, etc.
#
# source://syntax_tree//lib/syntax_tree/node.rb#2439
class SyntaxTree::CallChainFormatter
  # @return [CallChainFormatter] a new instance of CallChainFormatter
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2443
  def initialize(node); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2447
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2501
  def format_chain(q, children); end

  # [Call | MethodAddBlock] the top of the call chain
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2441
  def node; end

  private

  # For certain nodes, we want to attach directly to the end and don't
  # want to indent the first call. So we'll pop off the first children and
  # format it separately here.
  #
  # @return [Boolean]
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2599
  def attach_directly?(node); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2608
  def format_child(q, child, skip_comments: T.unsafe(nil), skip_operator: T.unsafe(nil), skip_attached: T.unsafe(nil)); end

  class << self
    # @return [Boolean]
    #
    # source://syntax_tree//lib/syntax_tree/node.rb#2581
    def chained?(node); end
  end
end

# Wraps a call operator (which can be a string literal :: or an Op node or a
# Period node) and formats it when called.
#
# source://syntax_tree//lib/syntax_tree/node.rb#2401
class SyntaxTree::CallOperatorFormatter
  # @return [CallOperatorFormatter] a new instance of CallOperatorFormatter
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2405
  def initialize(operator); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2409
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2413
  def format(q); end

  # [:"::" | Op | Period] the operator being formatted
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2403
  def operator; end
end

# Case represents the beginning of a case chain.
#
#     case value
#     when 1
#       "one"
#     when 2
#       "two"
#     else
#       "number"
#     end
#
# source://syntax_tree//lib/syntax_tree/node.rb#2773
class SyntaxTree::Case < ::SyntaxTree::Node
  # @return [Case] a new instance of Case
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2785
  def initialize(keyword:, value:, consequent:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2793
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2797
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2783
  def comments; end

  # [In | When] the next clause in the chain
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2780
  def consequent; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2797
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2803
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2813
  def format(q); end

  # [Kw] the keyword that opens this expression
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2774
  def keyword; end

  # [nil | untyped] optional value being switched on
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2777
  def value; end
end

# Class represents defining a class using the +class+ keyword.
#
#     class Container
#     end
#
# Classes can have path names as their class name in case it's being nested
# under a namespace, as in:
#
#     class Namespace::Container
#     end
#
# Classes can also be defined as a top-level path, in the case that it's
# already in a namespace but you want to define it at the top-level instead,
# as in:
#
#     module OtherNamespace
#       class ::Namespace::Container
#       end
#     end
#
# All of these declarations can also have an optional superclass reference, as
# in:
#
#     class Child < Parent
#     end
#
# That superclass can actually be any Ruby expression, it doesn't necessarily
# need to be a constant, as in:
#
#     class Child < method
#     end
#
# source://syntax_tree//lib/syntax_tree/node.rb#2934
class SyntaxTree::ClassDeclaration < ::SyntaxTree::Node
  # @return [ClassDeclaration] a new instance of ClassDeclaration
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2946
  def initialize(constant:, superclass:, bodystmt:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2954
  def accept(visitor); end

  # [BodyStmt] the expressions to execute within the context of the class
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2941
  def bodystmt; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2958
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2944
  def comments; end

  # [ConstPathRef | ConstRef | TopConstRef] the name of the class being
  # defined
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2935
  def constant; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2958
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2964
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2974
  def format(q); end

  # [nil | untyped] the optional superclass declaration
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2938
  def superclass; end

  private

  # source://syntax_tree//lib/syntax_tree/node.rb#2998
  def format_declaration(q); end
end

# Comma represents the use of the , operator.
#
# source://syntax_tree//lib/syntax_tree/node.rb#3013
class SyntaxTree::Comma < ::SyntaxTree::Node
  # @return [Comma] a new instance of Comma
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3016
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3021
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3025
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3025
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3031
  def deconstruct_keys(_keys); end

  # [String] the comma in the string
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3014
  def value; end
end

# Command represents a method call with arguments and no parentheses. Note
# that Command nodes only happen when there is no explicit receiver for this
# method.
#
#     method argument
#
# source://syntax_tree//lib/syntax_tree/node.rb#3043
class SyntaxTree::Command < ::SyntaxTree::Node
  # @return [Command] a new instance of Command
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3052
  def initialize(message:, arguments:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3059
  def accept(visitor); end

  # [Args] the arguments being sent with the message
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3047
  def arguments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3063
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3050
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3063
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3069
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3078
  def format(q); end

  # [Const | Ident] the message being sent to the implicit receiver
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3044
  def message; end

  private

  # source://syntax_tree//lib/syntax_tree/node.rb#3087
  def align(q, node, &block); end
end

# CommandCall represents a method call on an object with arguments and no
# parentheses.
#
#     object.method argument
#
# source://syntax_tree//lib/syntax_tree/node.rb#3126
class SyntaxTree::CommandCall < ::SyntaxTree::Node
  # @return [CommandCall] a new instance of CommandCall
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3141
  def initialize(receiver:, operator:, message:, arguments:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3157
  def accept(visitor); end

  # [nil | Args] the arguments going along with the message
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3136
  def arguments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3161
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3139
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3161
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3167
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3178
  def format(q); end

  # [Const | Ident | Op] the message being send
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3133
  def message; end

  # [:"::" | Op | Period] the operator used to send the message
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3130
  def operator; end

  # [untyped] the receiver of the message
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3127
  def receiver; end

  private

  # source://syntax_tree//lib/syntax_tree/node.rb#3217
  def argument_alignment(q, doc); end
end

# Comment represents a comment in the source.
#
#     # comment
#
# source://syntax_tree//lib/syntax_tree/node.rb#3245
class SyntaxTree::Comment < ::SyntaxTree::Node
  # @return [Comment] a new instance of Comment
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3253
  def initialize(value:, inline:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3286
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3290
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3282
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3290
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3296
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3300
  def format(q); end

  # @return [Boolean]
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3278
  def ignore?; end

  # [boolean] whether or not there is code on the same line as this comment.
  # If there is, then inline will be true.
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3250
  def inline; end

  # [boolean] whether or not there is code on the same line as this comment.
  # If there is, then inline will be true.
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3250
  def inline?; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3262
  def leading!; end

  # @return [Boolean]
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3266
  def leading?; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3270
  def trailing!; end

  # @return [Boolean]
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3274
  def trailing?; end

  # [String] the contents of the comment
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3246
  def value; end
end

# Formats an If or Unless node.
#
# source://syntax_tree//lib/syntax_tree/node.rb#5422
class SyntaxTree::ConditionalFormatter
  # @return [ConditionalFormatter] a new instance of ConditionalFormatter
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5429
  def initialize(keyword, node); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5434
  def format(q); end

  # [String] the keyword associated with this conditional
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5424
  def keyword; end

  # [If | Unless] the node that is being formatted
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5427
  def node; end

  private

  # @return [Boolean]
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5535
  def contains_conditional?; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5470
  def format_break(q, force:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5490
  def format_ternary(q); end
end

# Formats an IfMod or UnlessMod node.
#
# source://syntax_tree//lib/syntax_tree/node.rb#5708
class SyntaxTree::ConditionalModFormatter
  # @return [ConditionalModFormatter] a new instance of ConditionalModFormatter
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5715
  def initialize(keyword, node); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5720
  def format(q); end

  # [String] the keyword associated with this conditional
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5710
  def keyword; end

  # [IfMod | UnlessMod] the node that is being formatted
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5713
  def node; end

  private

  # source://syntax_tree//lib/syntax_tree/node.rb#5730
  def format_break(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5741
  def format_flat(q); end
end

# Const represents a literal value that _looks_ like a constant. This could
# actually be a reference to a constant:
#
#     Constant
#
# It could also be something that looks like a constant in another context, as
# in a method call to a capitalized method:
#
#     object.Constant
#
# or a symbol that starts with a capital letter:
#
#     :Constant
#
# source://syntax_tree//lib/syntax_tree/node.rb#3320
class SyntaxTree::Const < ::SyntaxTree::Node
  # @return [Const] a new instance of Const
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3326
  def initialize(value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3332
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3336
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3324
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3336
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3342
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3346
  def format(q); end

  # [String] the name of the constant
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3321
  def value; end
end

# ConstPathField represents the child node of some kind of assignment. It
# represents when you're assigning to a constant that is being referenced as
# a child of another variable.
#
#     object::Const = value
#
# source://syntax_tree//lib/syntax_tree/node.rb#3358
class SyntaxTree::ConstPathField < ::SyntaxTree::Node
  # @return [ConstPathField] a new instance of ConstPathField
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3367
  def initialize(parent:, constant:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3374
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3378
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3365
  def comments; end

  # [Const] the constant itself
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3362
  def constant; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3378
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3384
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3393
  def format(q); end

  # [untyped] the source of the constant
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3359
  def parent; end
end

# ConstPathRef represents referencing a constant by a path.
#
#     object::Const
#
# source://syntax_tree//lib/syntax_tree/node.rb#3405
class SyntaxTree::ConstPathRef < ::SyntaxTree::Node
  # @return [ConstPathRef] a new instance of ConstPathRef
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3414
  def initialize(parent:, constant:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3421
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3425
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3412
  def comments; end

  # [Const] the constant itself
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3409
  def constant; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3425
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3431
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3440
  def format(q); end

  # [untyped] the source of the constant
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3406
  def parent; end
end

# ConstRef represents the name of the constant being used in a class or module
# declaration.
#
#     class Container
#     end
#
# source://syntax_tree//lib/syntax_tree/node.rb#3454
class SyntaxTree::ConstRef < ::SyntaxTree::Node
  # @return [ConstRef] a new instance of ConstRef
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3460
  def initialize(constant:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3466
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3470
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3458
  def comments; end

  # [Const] the constant itself
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3455
  def constant; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3470
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3476
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3480
  def format(q); end
end

# If the predicate of a conditional or loop contains an assignment (in which
# case we can't know for certain that that assignment doesn't impact the
# statements inside the conditional) then we can't use the modifier form
# and we must use the block form.
#
# source://syntax_tree//lib/syntax_tree/node.rb#5337
module SyntaxTree::ContainsAssignment
  class << self
    # source://syntax_tree//lib/syntax_tree/node.rb#5338
    def call(parent); end
  end
end

# This is the default print width when formatting. It can be overridden in the
# CLI by passing the --print-width option or here in the API by passing the
# optional second argument to ::format.
#
# source://syntax_tree//lib/syntax_tree.rb#38
SyntaxTree::DEFAULT_PRINT_WIDTH = T.let(T.unsafe(nil), Integer)

# Def represents defining a regular method on the current self object.
#
#     def method(param) result end
#
# source://syntax_tree//lib/syntax_tree/node.rb#3526
class SyntaxTree::Def < ::SyntaxTree::Node
  # @return [Def] a new instance of Def
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3538
  def initialize(name:, params:, bodystmt:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3546
  def accept(visitor); end

  # [BodyStmt] the expressions to be executed by the method
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3533
  def bodystmt; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3550
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3536
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3550
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3556
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3566
  def format(q); end

  # [Backtick | Const | Ident | Kw | Op] the name of the method
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3527
  def name; end

  # [Params | Paren] the parameter declaration for the method
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3530
  def params; end
end

# DefEndless represents defining a single-line method since Ruby 3.0+.
#
#     def method = result
#
# source://syntax_tree//lib/syntax_tree/node.rb#3595
class SyntaxTree::DefEndless < ::SyntaxTree::Node
  # @return [DefEndless] a new instance of DefEndless
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3613
  def initialize(target:, operator:, name:, paren:, statement:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3631
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3635
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3611
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3635
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3641
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3653
  def format(q); end

  # [Backtick | Const | Ident | Kw | Op] the name of the method
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3602
  def name; end

  # [Op | Period] the operator being used to declare the method
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3599
  def operator; end

  # [nil | Params | Paren] the parameter declaration for the method
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3605
  def paren; end

  # [untyped] the expression to be executed by the method
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3608
  def statement; end

  # [untyped] the target where the method is being defined
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3596
  def target; end
end

# Defined represents the use of the +defined?+ operator. It can be used with
# and without parentheses.
#
#     defined?(variable)
#
# source://syntax_tree//lib/syntax_tree/node.rb#3687
class SyntaxTree::Defined < ::SyntaxTree::Node
  # @return [Defined] a new instance of Defined
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3693
  def initialize(value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3699
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3703
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3691
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3703
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3709
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3713
  def format(q); end

  # [untyped] the value being sent to the keyword
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3688
  def value; end
end

# Defs represents defining a singleton method on an object.
#
#     def object.method(param) result end
#
# source://syntax_tree//lib/syntax_tree/node.rb#3731
class SyntaxTree::Defs < ::SyntaxTree::Node
  # @return [Defs] a new instance of Defs
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3749
  def initialize(target:, operator:, name:, params:, bodystmt:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3767
  def accept(visitor); end

  # [BodyStmt] the expressions to be executed by the method
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3744
  def bodystmt; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3771
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3747
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3771
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3777
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3789
  def format(q); end

  # [Backtick | Const | Ident | Kw | Op] the name of the method
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3738
  def name; end

  # [Op | Period] the operator being used to declare the method
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3735
  def operator; end

  # [Params | Paren] the parameter declaration for the method
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3741
  def params; end

  # [untyped] the target where the method is being defined
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3732
  def target; end
end

# DoBlock represents passing a block to a method call using the +do+ and +end+
# keywords.
#
#     method do |value|
#     end
#
# source://syntax_tree//lib/syntax_tree/node.rb#3822
class SyntaxTree::DoBlock < ::SyntaxTree::Node
  # @return [DoBlock] a new instance of DoBlock
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3834
  def initialize(keyword:, block_var:, bodystmt:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3842
  def accept(visitor); end

  # [nil | BlockVar] the optional variable declaration within this block
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3826
  def block_var; end

  # [BodyStmt] the expressions to be executed within this block
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3829
  def bodystmt; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3846
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3832
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3846
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3852
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3862
  def format(q); end

  # [Kw] the do keyword that opens this block
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3823
  def keyword; end
end

# Dot2 represents using the .. operator between two expressions. Usually this
# is to create a range object.
#
#     1..2
#
# Sometimes this operator is used to create a flip-flop.
#
#     if value == 5 .. value == 10
#     end
#
# One of the sides of the expression may be nil, but not both.
#
# source://syntax_tree//lib/syntax_tree/node.rb#3909
class SyntaxTree::Dot2 < ::SyntaxTree::Node
  # @return [Dot2] a new instance of Dot2
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3918
  def initialize(left:, right:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3925
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3929
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3916
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3929
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3935
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3939
  def format(q); end

  # [nil | untyped] the left side of the expression
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3910
  def left; end

  # [nil | untyped] the right side of the expression
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3913
  def right; end
end

# Dot3 represents using the ... operator between two expressions. Usually this
# is to create a range object. It's effectively the same event as the Dot2
# node but with this operator you're asking Ruby to omit the final value.
#
#     1...2
#
# Like Dot2 it can also be used to create a flip-flop.
#
#     if value == 5 ... value == 10
#     end
#
# One of the sides of the expression may be nil, but not both.
#
# source://syntax_tree//lib/syntax_tree/node.rb#3957
class SyntaxTree::Dot3 < ::SyntaxTree::Node
  # @return [Dot3] a new instance of Dot3
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3966
  def initialize(left:, right:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3973
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3977
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3964
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3977
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#3983
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3987
  def format(q); end

  # [nil | untyped] the left side of the expression
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3958
  def left; end

  # [nil | untyped] the right side of the expression
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3961
  def right; end
end

# Responsible for formatting Dot2 and Dot3 nodes.
#
# source://syntax_tree//lib/syntax_tree/node.rb#3868
class SyntaxTree::DotFormatter
  # @return [DotFormatter] a new instance of DotFormatter
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3875
  def initialize(operator, node); end

  # source://syntax_tree//lib/syntax_tree/node.rb#3880
  def format(q); end

  # [Dot2 | Dot3] the node that is being formatter
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3873
  def node; end

  # [String] the operator to display
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#3870
  def operator; end
end

# DynaSymbol represents a symbol literal that uses quotes to dynamically
# define its value.
#
#     :"#{variable}"
#
# They can also be used as a special kind of dynamic hash key, as in:
#
#     { "#{key}": value }
#
# source://syntax_tree//lib/syntax_tree/node.rb#4044
class SyntaxTree::DynaSymbol < ::SyntaxTree::Node
  # @return [DynaSymbol] a new instance of DynaSymbol
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4053
  def initialize(parts:, quote:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4060
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4064
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4051
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4064
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4070
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4074
  def format(q); end

  # [Array[ StringDVar | StringEmbExpr | TStringContent ]] the parts of the
  # dynamic symbol
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4045
  def parts; end

  # [String] the quote used to delimit the dynamic symbol
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4048
  def quote; end

  private

  # Here we determine the quotes to use for a dynamic symbol. It's bound by a
  # lot of rules because it could be in many different contexts with many
  # different kinds of escaping.
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4108
  def quotes(q); end
end

# ENDBlock represents the use of the +END+ keyword, which hooks into the
# lifecycle of the interpreter. Whatever is inside the block will get executed
# when the program ends.
#
#     END {
#     }
#
# Interestingly, the END keyword doesn't allow the do and end keywords for the
# block. Only braces are permitted.
#
# source://syntax_tree//lib/syntax_tree/node.rb#243
class SyntaxTree::ENDBlock < ::SyntaxTree::Node
  # @return [ENDBlock] a new instance of ENDBlock
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#252
  def initialize(lbrace:, statements:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#259
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#263
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#250
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#263
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#269
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#278
  def format(q); end

  # [LBrace] the left brace that is seen after the keyword
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#244
  def lbrace; end

  # [Statements] the expressions to be executed
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#247
  def statements; end
end

# Else represents the end of an +if+, +unless+, or +case+ chain.
#
#     if variable
#     else
#     end
#
# source://syntax_tree//lib/syntax_tree/node.rb#4155
class SyntaxTree::Else < ::SyntaxTree::Node
  # @return [Else] a new instance of Else
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4164
  def initialize(keyword:, statements:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4171
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4175
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4162
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4175
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4181
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4190
  def format(q); end

  # [Kw] the else keyword
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4156
  def keyword; end

  # [Statements] the expressions to be executed
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4159
  def statements; end
end

# Elsif represents another clause in an +if+ or +unless+ chain.
#
#     if variable
#     elsif other_variable
#     end
#
# source://syntax_tree//lib/syntax_tree/node.rb#4211
class SyntaxTree::Elsif < ::SyntaxTree::Node
  # @return [Elsif] a new instance of Elsif
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4223
  def initialize(predicate:, statements:, consequent:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4237
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4241
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4221
  def comments; end

  # [nil | Elsif | Else] the next clause in the chain
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4218
  def consequent; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4241
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4247
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4257
  def format(q); end

  # [untyped] the expression to be checked
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4212
  def predicate; end

  # [Statements] the expressions to be executed
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4215
  def statements; end
end

# EmbDoc represents a multi-line comment.
#
#     =begin
#     first line
#     second line
#     =end
#
# source://syntax_tree//lib/syntax_tree/node.rb#4289
class SyntaxTree::EmbDoc < ::SyntaxTree::Node
  # @return [EmbDoc] a new instance of EmbDoc
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4292
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4309
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4313
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4305
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4313
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4319
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4323
  def format(q); end

  # @return [Boolean]
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4301
  def ignore?; end

  # @return [Boolean]
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4297
  def inline?; end

  # [String] the contents of the comment
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4290
  def value; end
end

# EmbExprBeg represents the beginning token for using interpolation inside of
# a parent node that accepts string content (like a string or regular
# expression).
#
#     "Hello, #{person}!"
#
# source://syntax_tree//lib/syntax_tree/node.rb#4336
class SyntaxTree::EmbExprBeg < ::SyntaxTree::Node
  # @return [EmbExprBeg] a new instance of EmbExprBeg
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4339
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4344
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4348
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4348
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4354
  def deconstruct_keys(_keys); end

  # [String] the #{ used in the string
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4337
  def value; end
end

# EmbExprEnd represents the ending token for using interpolation inside of a
# parent node that accepts string content (like a string or regular
# expression).
#
#     "Hello, #{person}!"
#
# source://syntax_tree//lib/syntax_tree/node.rb#4366
class SyntaxTree::EmbExprEnd < ::SyntaxTree::Node
  # @return [EmbExprEnd] a new instance of EmbExprEnd
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4369
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4374
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4378
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4378
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4384
  def deconstruct_keys(_keys); end

  # [String] the } used in the string
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4367
  def value; end
end

# EmbVar represents the use of shorthand interpolation for an instance, class,
# or global variable into a parent node that accepts string content (like a
# string or regular expression).
#
#     "#@variable"
#
# In the example above, an EmbVar node represents the # because it forces
#
# source://syntax_tree//lib/syntax_tree/node.rb#4398
class SyntaxTree::EmbVar < ::SyntaxTree::Node
  # @return [EmbVar] a new instance of EmbVar
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4401
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4406
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4410
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4410
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4416
  def deconstruct_keys(_keys); end

  # [String] the # used in the string
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4399
  def value; end
end

# EndContent represents the use of __END__ syntax, which allows individual
# scripts to keep content after the main ruby code that can be read through
# the DATA constant.
#
#     puts DATA.read
#
#     __END__
#     some other content that is not executed by the program
#
# source://syntax_tree//lib/syntax_tree/node.rb#302
class SyntaxTree::EndContent < ::SyntaxTree::Node
  # @return [EndContent] a new instance of EndContent
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#308
  def initialize(value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#314
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#318
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#306
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#318
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#324
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#328
  def format(q); end

  # [String] the content after the script
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#303
  def value; end
end

# Ensure represents the use of the +ensure+ keyword and its subsequent
# statements.
#
#     begin
#     ensure
#     end
#
# source://syntax_tree//lib/syntax_tree/node.rb#4429
class SyntaxTree::Ensure < ::SyntaxTree::Node
  # @return [Ensure] a new instance of Ensure
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4438
  def initialize(keyword:, statements:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4445
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4449
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4436
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4449
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4455
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4464
  def format(q); end

  # [Kw] the ensure keyword that began this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4430
  def keyword; end

  # [Statements] the expressions to be executed
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4433
  def statements; end
end

# The environment class is used to keep track of local variables and arguments
# inside a particular scope
#
# source://syntax_tree//lib/syntax_tree/visitor/environment.rb#6
class SyntaxTree::Environment
  # initialize: (Environment | nil parent) -> void
  #
  # @return [Environment] a new instance of Environment
  #
  # source://syntax_tree//lib/syntax_tree/visitor/environment.rb#42
  def initialize(parent = T.unsafe(nil)); end

  # Adding a local definition will either insert a new entry in the locals
  # hash or append a new definition location to an existing local. Notice that
  # it's not possible to change the type of a local after it has been
  # registered
  #   add_local_definition: (Ident | Label identifier, Symbol type) -> void
  #
  # source://syntax_tree//lib/syntax_tree/visitor/environment.rb#52
  def add_local_definition(identifier, type); end

  # Adding a local usage will either insert a new entry in the locals
  # hash or append a new usage location to an existing local. Notice that
  # it's not possible to change the type of a local after it has been
  # registered
  #   add_local_usage: (Ident | Label identifier, Symbol type) -> void
  #
  # source://syntax_tree//lib/syntax_tree/visitor/environment.rb#64
  def add_local_usage(identifier, type); end

  # Try to find the local given its name in this environment or any of its
  # parents
  #   find_local: (String name) -> Local | nil
  #
  # source://syntax_tree//lib/syntax_tree/visitor/environment.rb#74
  def find_local(name); end

  # [Array[Local]] The local variables and arguments defined in this
  # environment
  #
  # source://syntax_tree//lib/syntax_tree/visitor/environment.rb#9
  def locals; end
end

# This class tracks the occurrences of a local variable or argument
#
# source://syntax_tree//lib/syntax_tree/visitor/environment.rb#12
class SyntaxTree::Environment::Local
  # initialize: (Symbol type) -> void
  #
  # @return [Local] a new instance of Local
  #
  # source://syntax_tree//lib/syntax_tree/visitor/environment.rb#24
  def initialize(type); end

  # add_definition: (Location location) -> void
  #
  # source://syntax_tree//lib/syntax_tree/visitor/environment.rb#31
  def add_definition(location); end

  # add_usage: (Location location) -> void
  #
  # source://syntax_tree//lib/syntax_tree/visitor/environment.rb#36
  def add_usage(location); end

  # [Array[Location]] The locations of all definitions and assignments of
  # this local
  #
  # source://syntax_tree//lib/syntax_tree/visitor/environment.rb#18
  def definitions; end

  # [Symbol] The type of the local (e.g. :argument, :variable)
  #
  # source://syntax_tree//lib/syntax_tree/visitor/environment.rb#14
  def type; end

  # [Array[Location]] The locations of all usages of this local
  #
  # source://syntax_tree//lib/syntax_tree/visitor/environment.rb#21
  def usages; end
end

# ExcessedComma represents a trailing comma in a list of block parameters. It
# changes the block parameters such that they will destructure.
#
#     [[1, 2, 3], [2, 3, 4]].each do |first, second,|
#     end
#
# In the above example, an ExcessedComma node would appear in the third
# position of the Params node that is used to declare that block. The third
# position typically represents a rest-type parameter, but in this case is
# used to indicate that a trailing comma was used.
#
# source://syntax_tree//lib/syntax_tree/node.rb#4487
class SyntaxTree::ExcessedComma < ::SyntaxTree::Node
  # @return [ExcessedComma] a new instance of ExcessedComma
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4493
  def initialize(value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4499
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4503
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4491
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4503
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4509
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4513
  def format(q); end

  # [String] the comma
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4488
  def value; end
end

# FCall represents the piece of a method call that comes before any arguments
# (i.e., just the name of the method). It is used in places where the parser
# is sure that it is a method call and not potentially a local variable.
#
#     method(argument)
#
# In the above example, it's referring to the +method+ segment.
#
# source://syntax_tree//lib/syntax_tree/node.rb#4526
class SyntaxTree::FCall < ::SyntaxTree::Node
  # @return [FCall] a new instance of FCall
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4535
  def initialize(value:, arguments:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4542
  def accept(visitor); end

  # [nil | ArgParen | Args] the arguments to the method call
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4530
  def arguments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4546
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4533
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4546
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4552
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4561
  def format(q); end

  # [Const | Ident] the name of the method
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4527
  def value; end
end

# Field is always the child of an assignment. It represents assigning to a
# “field” on an object.
#
#     object.variable = value
#
# source://syntax_tree//lib/syntax_tree/node.rb#4582
class SyntaxTree::Field < ::SyntaxTree::Node
  # @return [Field] a new instance of Field
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4594
  def initialize(parent:, operator:, name:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4602
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4606
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4592
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4606
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4612
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4622
  def format(q); end

  # [Const | Ident] the name of the field being assigned
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4589
  def name; end

  # [:"::" | Op | Period] the operator being used for the assignment
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4586
  def operator; end

  # [untyped] the parent object that owns the field being assigned
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4583
  def parent; end
end

# FloatLiteral represents a floating point number literal.
#
#     1.0
#
# source://syntax_tree//lib/syntax_tree/node.rb#4636
class SyntaxTree::FloatLiteral < ::SyntaxTree::Node
  # @return [FloatLiteral] a new instance of FloatLiteral
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4642
  def initialize(value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4648
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4652
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4640
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4652
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4658
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4662
  def format(q); end

  # [String] the value of the floating point number literal
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4637
  def value; end
end

# Formats either a Break, Next, or Return node.
#
# source://syntax_tree//lib/syntax_tree/node.rb#2178
class SyntaxTree::FlowControlFormatter
  # @return [FlowControlFormatter] a new instance of FlowControlFormatter
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2185
  def initialize(keyword, node); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2190
  def format(q); end

  # [String] the keyword to print
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2180
  def keyword; end

  # [Break | Next | Return] the node being formatted
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2183
  def node; end

  private

  # source://syntax_tree//lib/syntax_tree/node.rb#2332
  def format_arguments(q, opening, closing); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2322
  def format_array_contents(q, array); end

  # @return [Boolean]
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2342
  def skip_parens?(node); end
end

# FndPtn represents matching against a pattern where you find a pattern in an
# array using the Ruby 3.0+ pattern matching syntax.
#
#     case value
#     in [*, 7, *]
#     end
#
# source://syntax_tree//lib/syntax_tree/node.rb#4675
class SyntaxTree::FndPtn < ::SyntaxTree::Node
  # @return [FndPtn] a new instance of FndPtn
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4691
  def initialize(constant:, left:, values:, right:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4700
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4704
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4689
  def comments; end

  # [nil | untyped] the optional constant wrapper
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4676
  def constant; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4704
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4710
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4721
  def format(q); end

  # [VarField] the splat on the left-hand side
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4679
  def left; end

  # [VarField] the splat on the right-hand side
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4686
  def right; end

  # [Array[ untyped ]] the list of positional expressions in the pattern that
  # are being matched
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4683
  def values; end
end

# For represents using a +for+ loop.
#
#     for value in list do
#     end
#
# source://syntax_tree//lib/syntax_tree/node.rb#4754
class SyntaxTree::For < ::SyntaxTree::Node
  # @return [For] a new instance of For
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4766
  def initialize(index:, collection:, statements:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4774
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4778
  def child_nodes; end

  # [untyped] the object being enumerated in the loop
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4758
  def collection; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4764
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4778
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4784
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4794
  def format(q); end

  # [MLHS | VarField] the variable declaration being used to
  # pull values out of the object being enumerated
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4755
  def index; end

  # [Statements] the statements to be executed
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4761
  def statements; end
end

# A slightly enhanced PP that knows how to format recursively including
# comments.
#
# source://syntax_tree//lib/syntax_tree/formatter.rb#16
class SyntaxTree::Formatter < ::PrettierPrint
  # @return [Formatter] a new instance of Formatter
  #
  # source://syntax_tree//lib/syntax_tree/formatter.rb#33
  def initialize(source, *args, quote: T.unsafe(nil), trailing_comma: T.unsafe(nil), target_ruby_version: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/formatter.rb#58
  def format(node, stackable: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/formatter.rb#118
  def format_each(nodes); end

  # source://syntax_tree//lib/syntax_tree/formatter.rb#122
  def grandparent; end

  # This is a simplified version of prettyprint's group. It doesn't provide
  # any of the more advanced options because we don't need them and they take
  # up expensive computation time.
  #
  # source://syntax_tree//lib/syntax_tree/formatter.rb#137
  def group; end

  # source://syntax_tree//lib/syntax_tree/formatter.rb#126
  def parent; end

  # source://syntax_tree//lib/syntax_tree/formatter.rb#130
  def parents; end

  # These options are overridden in plugins to we need to make sure they are
  # available here.
  #
  # source://syntax_tree//lib/syntax_tree/formatter.rb#30
  def quote; end

  # A similar version to the super, except that it calls back into the
  # separator proc with the instance of `self`.
  #
  # source://syntax_tree//lib/syntax_tree/formatter.rb#151
  def seplist(list, sep = T.unsafe(nil), iter_method = T.unsafe(nil)); end

  # Returns the value of attribute source.
  #
  # source://syntax_tree//lib/syntax_tree/formatter.rb#26
  def source; end

  # Returns the value of attribute stack.
  #
  # source://syntax_tree//lib/syntax_tree/formatter.rb#26
  def stack; end

  # These options are overridden in plugins to we need to make sure they are
  # available here.
  #
  # source://syntax_tree//lib/syntax_tree/formatter.rb#30
  def target_ruby_version; end

  # This is a much simplified version of prettyprint's text. It avoids
  # calculating width by pushing the string directly onto the target.
  #
  # source://syntax_tree//lib/syntax_tree/formatter.rb#167
  def text(string); end

  # These options are overridden in plugins to we need to make sure they are
  # available here.
  #
  # source://syntax_tree//lib/syntax_tree/formatter.rb#30
  def trailing_comma; end

  # These options are overridden in plugins to we need to make sure they are
  # available here.
  #
  # source://syntax_tree//lib/syntax_tree/formatter.rb#30
  def trailing_comma?; end

  class << self
    # source://syntax_tree//lib/syntax_tree/formatter.rb#51
    def format(source, node); end
  end
end

# source://syntax_tree//lib/syntax_tree/formatter.rb#23
SyntaxTree::Formatter::COMMENT_PRIORITY = T.let(T.unsafe(nil), Integer)

# source://syntax_tree//lib/syntax_tree/formatter.rb#24
SyntaxTree::Formatter::HEREDOC_PRIORITY = T.let(T.unsafe(nil), Integer)

# We want to minimize as much as possible the number of options that are
# available in syntax tree. For the most part, if users want non-default
# formatting, they should override the format methods on the specific nodes
# themselves. However, because of some history with prettier and the fact
# that folks have become entrenched in their ways, we decided to provide a
# small amount of configurability.
#
# Note that we're keeping this in a global-ish hash instead of just
# overriding methods on classes so that other plugins can reference this if
# necessary. For example, the RBS plugin references the quote style.
#
# source://syntax_tree//lib/syntax_tree/formatter.rb#17
SyntaxTree::Formatter::OPTIONS = T.let(T.unsafe(nil), Hash)

# GVar represents a global variable literal.
#
#     $variable
#
# source://syntax_tree//lib/syntax_tree/node.rb#4819
class SyntaxTree::GVar < ::SyntaxTree::Node
  # @return [GVar] a new instance of GVar
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4825
  def initialize(value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4831
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4835
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4823
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4835
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4841
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4845
  def format(q); end

  # [String] the name of the global variable
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4820
  def value; end
end

# This holds references to objects that respond to both #parse and #format
# so that we can use them in the CLI.
#
# source://syntax_tree//lib/syntax_tree.rb#32
SyntaxTree::HANDLERS = T.let(T.unsafe(nil), Hash)

# This module is responsible for formatting the assocs contained within a
# hash or bare hash. It first determines if every key in the hash can use
# labels. If it can, it uses labels. Otherwise it uses hash rockets.
#
# source://syntax_tree//lib/syntax_tree/node.rb#1434
module SyntaxTree::HashKeyFormatter
  class << self
    # source://syntax_tree//lib/syntax_tree/node.rb#1478
    def for(container); end
  end
end

# Formats the keys of a hash literal using labels.
#
# source://syntax_tree//lib/syntax_tree/node.rb#1436
class SyntaxTree::HashKeyFormatter::Labels
  # source://syntax_tree//lib/syntax_tree/node.rb#1439
  def format_key(q, key); end
end

# source://syntax_tree//lib/syntax_tree/node.rb#1437
SyntaxTree::HashKeyFormatter::Labels::LABEL = T.let(T.unsafe(nil), Regexp)

# Formats the keys of a hash literal using hash rockets.
#
# source://syntax_tree//lib/syntax_tree/node.rb#1462
class SyntaxTree::HashKeyFormatter::Rockets
  # source://syntax_tree//lib/syntax_tree/node.rb#1463
  def format_key(q, key); end
end

# HashLiteral represents a hash literal.
#
#     { key => value }
#
# source://syntax_tree//lib/syntax_tree/node.rb#4857
class SyntaxTree::HashLiteral < ::SyntaxTree::Node
  # @return [HashLiteral] a new instance of HashLiteral
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4890
  def initialize(lbrace:, assocs:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4897
  def accept(visitor); end

  # [Array[ AssocNew | AssocSplat ]] the optional contents of the hash
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4885
  def assocs; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4901
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4888
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4901
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4907
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4911
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4919
  def format_key(q, key); end

  # [LBrace] the left brace that opens this hash
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4882
  def lbrace; end

  private

  # If we have an empty hash that contains only comments, then we're going
  # to do some special printing to ensure they get indented correctly.
  #
  # @return [Boolean]
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4927
  def empty_with_comments?; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4931
  def format_contents(q); end
end

# This is a special formatter used if the hash literal contains no values
# but _does_ contain comments. In this case we do some special formatting to
# make sure the comments gets indented properly.
#
# source://syntax_tree//lib/syntax_tree/node.rb#4858
class SyntaxTree::HashLiteral::EmptyWithCommentsFormatter
  # @return [EmptyWithCommentsFormatter] a new instance of EmptyWithCommentsFormatter
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4862
  def initialize(lbrace); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4866
  def format(q); end

  # [LBrace] the opening brace
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4860
  def lbrace; end
end

# Heredoc represents a heredoc string literal.
#
#     <<~DOC
#       contents
#     DOC
#
# source://syntax_tree//lib/syntax_tree/node.rb#4961
class SyntaxTree::Heredoc < ::SyntaxTree::Node
  # @return [Heredoc] a new instance of Heredoc
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4977
  def initialize(beginning:, location:, ending: T.unsafe(nil), dedent: T.unsafe(nil), parts: T.unsafe(nil), comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#4993
  def accept(visitor); end

  # [HeredocBeg] the opening of the heredoc
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4962
  def beginning; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4997
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4975
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#4997
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5003
  def deconstruct_keys(_keys); end

  # [Integer] how far to dedent the heredoc
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4968
  def dedent; end

  # [HeredocEnd] the ending of the heredoc
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4965
  def ending; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5017
  def format(q); end

  # [Array[ StringEmbExpr | StringDVar | TStringContent ]] the parts of the
  # heredoc string literal
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#4972
  def parts; end
end

# This is a very specific behavior where you want to force a newline, but
# don't want to force the break parent.
#
# source://syntax_tree//lib/syntax_tree/node.rb#5015
SyntaxTree::Heredoc::SEPARATOR = T.let(T.unsafe(nil), PrettierPrint::Breakable)

# HeredocBeg represents the beginning declaration of a heredoc.
#
#     <<~DOC
#       contents
#     DOC
#
# In the example above the HeredocBeg node represents <<~DOC.
#
# source://syntax_tree//lib/syntax_tree/node.rb#5061
class SyntaxTree::HeredocBeg < ::SyntaxTree::Node
  # @return [HeredocBeg] a new instance of HeredocBeg
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5067
  def initialize(value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5073
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5077
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5065
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5077
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5083
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5087
  def format(q); end

  # [String] the opening declaration of the heredoc
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5062
  def value; end
end

# HeredocEnd represents the closing declaration of a heredoc.
#
#     <<~DOC
#       contents
#     DOC
#
# In the example above the HeredocEnd node represents the closing DOC.
#
# source://syntax_tree//lib/syntax_tree/node.rb#5100
class SyntaxTree::HeredocEnd < ::SyntaxTree::Node
  # @return [HeredocEnd] a new instance of HeredocEnd
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5106
  def initialize(value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5112
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5116
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5104
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5116
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5122
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5126
  def format(q); end

  # [String] the closing declaration of the heredoc
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5101
  def value; end
end

# HshPtn represents matching against a hash pattern using the Ruby 2.7+
# pattern matching syntax.
#
#     case value
#     in { key: }
#     end
#
# source://syntax_tree//lib/syntax_tree/node.rb#5139
class SyntaxTree::HshPtn < ::SyntaxTree::Node
  # @return [HshPtn] a new instance of HshPtn
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5198
  def initialize(constant:, keywords:, keyword_rest:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5206
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5210
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5196
  def comments; end

  # [nil | untyped] the optional constant wrapper
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5186
  def constant; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5210
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5216
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5226
  def format(q); end

  # [nil | VarField] an optional parameter to gather up all remaining keywords
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5193
  def keyword_rest; end

  # [Array[ [Label, untyped] ]] the set of tuples representing the keywords
  # that should be matched against in the pattern
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5190
  def keywords; end

  private

  # source://syntax_tree//lib/syntax_tree/node.rb#5280
  def format_contents(q, parts, nested); end
end

# Formats a key-value pair in a hash pattern. The value is optional.
#
# source://syntax_tree//lib/syntax_tree/node.rb#5140
class SyntaxTree::HshPtn::KeywordFormatter
  # @return [KeywordFormatter] a new instance of KeywordFormatter
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5147
  def initialize(key, value); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5152
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5156
  def format(q); end

  # [Label] the keyword being used
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5142
  def key; end

  # [untyped] the optional value for the keyword
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5145
  def value; end
end

# Formats the optional double-splat from the pattern.
#
# source://syntax_tree//lib/syntax_tree/node.rb#5167
class SyntaxTree::HshPtn::KeywordRestFormatter
  # @return [KeywordRestFormatter] a new instance of KeywordRestFormatter
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5171
  def initialize(keyword_rest); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5175
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5179
  def format(q); end

  # [VarField] the parameter that matches the remaining keywords
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5169
  def keyword_rest; end
end

# IVar represents an instance variable literal.
#
#     @variable
#
# source://syntax_tree//lib/syntax_tree/node.rb#5950
class SyntaxTree::IVar < ::SyntaxTree::Node
  # @return [IVar] a new instance of IVar
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5956
  def initialize(value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5962
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5966
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5954
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5966
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5972
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5976
  def format(q); end

  # [String] the name of the instance variable
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5951
  def value; end
end

# Ident represents an identifier anywhere in code. It can represent a very
# large number of things, depending on where it is in the syntax tree.
#
#     value
#
# source://syntax_tree//lib/syntax_tree/node.rb#5302
class SyntaxTree::Ident < ::SyntaxTree::Node
  # @return [Ident] a new instance of Ident
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5308
  def initialize(value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5314
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5318
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5306
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5318
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5324
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5328
  def format(q); end

  # [String] the value of the identifier
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5303
  def value; end
end

# If represents the first clause in an +if+ chain.
#
#     if predicate
#     end
#
# source://syntax_tree//lib/syntax_tree/node.rb#5554
class SyntaxTree::If < ::SyntaxTree::Node
  # @return [If] a new instance of If
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5566
  def initialize(predicate:, statements:, consequent:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5580
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5584
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5564
  def comments; end

  # [nil, Elsif, Else] the next clause in the chain
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5561
  def consequent; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5584
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5590
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5600
  def format(q); end

  # [untyped] the expression to be checked
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5555
  def predicate; end

  # [Statements] the expressions to be executed
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5558
  def statements; end
end

# IfMod represents the modifier form of an +if+ statement.
#
#     expression if predicate
#
# source://syntax_tree//lib/syntax_tree/node.rb#5755
class SyntaxTree::IfMod < ::SyntaxTree::Node
  # @return [IfMod] a new instance of IfMod
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5764
  def initialize(statement:, predicate:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5771
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5775
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5762
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5775
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5781
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5790
  def format(q); end

  # [untyped] the expression to be checked
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5759
  def predicate; end

  # [untyped] the expression to be executed
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5756
  def statement; end
end

# IfOp represents a ternary clause.
#
#     predicate ? truthy : falsy
#
# source://syntax_tree//lib/syntax_tree/node.rb#5610
class SyntaxTree::IfOp < ::SyntaxTree::Node
  # @return [IfOp] a new instance of IfOp
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5622
  def initialize(predicate:, truthy:, falsy:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5630
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5634
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5620
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5634
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5640
  def deconstruct_keys(_keys); end

  # [untyped] the expression to be executed if the predicate is falsy
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5617
  def falsy; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5650
  def format(q); end

  # [untyped] the expression to be checked
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5611
  def predicate; end

  # [untyped] the expression to be executed if the predicate is truthy
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5614
  def truthy; end

  private

  # source://syntax_tree//lib/syntax_tree/node.rb#5669
  def format_break(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5692
  def format_flat(q); end
end

# Imaginary represents an imaginary number literal.
#
#     1i
#
# source://syntax_tree//lib/syntax_tree/node.rb#5800
class SyntaxTree::Imaginary < ::SyntaxTree::Node
  # @return [Imaginary] a new instance of Imaginary
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5806
  def initialize(value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5812
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5816
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5804
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5816
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5822
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5826
  def format(q); end

  # [String] the value of the imaginary number literal
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5801
  def value; end
end

# In represents using the +in+ keyword within the Ruby 2.7+ pattern matching
# syntax.
#
#     case value
#     in pattern
#     end
#
# source://syntax_tree//lib/syntax_tree/node.rb#5839
class SyntaxTree::In < ::SyntaxTree::Node
  # @return [In] a new instance of In
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5851
  def initialize(pattern:, statements:, consequent:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5859
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5863
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5849
  def comments; end

  # [nil | In | Else] the next clause in the chain
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5846
  def consequent; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5863
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5869
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5879
  def format(q); end

  # [untyped] the pattern to check against
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5840
  def pattern; end

  # [Statements] the expressions to execute if the pattern matched
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5843
  def statements; end
end

# Int represents an integer number literal.
#
#     1
#
# source://syntax_tree//lib/syntax_tree/node.rb#5906
class SyntaxTree::Int < ::SyntaxTree::Node
  # @return [Int] a new instance of Int
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5912
  def initialize(value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5918
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5922
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5910
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5922
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#5928
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#5932
  def format(q); end

  # [String] the value of the integer
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5907
  def value; end
end

# Kw represents the use of a keyword. It can be almost anywhere in the syntax
# tree, so you end up seeing it quite a lot.
#
#     if value
#     end
#
# In the above example, there would be two Kw nodes: one for the if and one
# for the end. Note that anything that matches the list of keywords in Ruby
# will use a Kw, so if you use a keyword in a symbol literal for instance:
#
#     :if
#
# then the contents of the symbol node will contain a Kw node.
#
# source://syntax_tree//lib/syntax_tree/node.rb#5995
class SyntaxTree::Kw < ::SyntaxTree::Node
  # @return [Kw] a new instance of Kw
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6004
  def initialize(value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6011
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6015
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6002
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6015
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6021
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6025
  def format(q); end

  # [Symbol] the symbol version of the value
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5999
  def name; end

  # [String] the value of the keyword
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#5996
  def value; end
end

# KwRestParam represents defining a parameter in a method definition that
# accepts all remaining keyword parameters.
#
#     def method(**kwargs) end
#
# source://syntax_tree//lib/syntax_tree/node.rb#6036
class SyntaxTree::KwRestParam < ::SyntaxTree::Node
  # @return [KwRestParam] a new instance of KwRestParam
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6042
  def initialize(name:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6048
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6052
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6040
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6052
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6058
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6062
  def format(q); end

  # [nil | Ident] the name of the parameter
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6037
  def name; end
end

# LBrace represents the use of a left brace, i.e., {.
#
# source://syntax_tree//lib/syntax_tree/node.rb#6303
class SyntaxTree::LBrace < ::SyntaxTree::Node
  # @return [LBrace] a new instance of LBrace
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6309
  def initialize(value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6315
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6319
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6307
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6319
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6325
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6329
  def format(q); end

  # [String] the left brace
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6304
  def value; end
end

# LBracket represents the use of a left bracket, i.e., [.
#
# source://syntax_tree//lib/syntax_tree/node.rb#6336
class SyntaxTree::LBracket < ::SyntaxTree::Node
  # @return [LBracket] a new instance of LBracket
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6342
  def initialize(value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6348
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6352
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6340
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6352
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6358
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6362
  def format(q); end

  # [String] the left bracket
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6337
  def value; end
end

# LParen represents the use of a left parenthesis, i.e., (.
#
# source://syntax_tree//lib/syntax_tree/node.rb#6369
class SyntaxTree::LParen < ::SyntaxTree::Node
  # @return [LParen] a new instance of LParen
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6375
  def initialize(value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6381
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6385
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6373
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6385
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6391
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6395
  def format(q); end

  # [String] the left parenthesis
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6370
  def value; end
end

# Label represents the use of an identifier to associate with an object. You
# can find it in a hash key, as in:
#
#     { key: value }
#
# In this case "key:" would be the body of the label. You can also find it in
# pattern matching, as in:
#
#     case value
#     in key:
#     end
#
# In this case "key:" would be the body of the label.
#
# source://syntax_tree//lib/syntax_tree/node.rb#6082
class SyntaxTree::Label < ::SyntaxTree::Node
  # @return [Label] a new instance of Label
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6088
  def initialize(value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6094
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6098
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6086
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6098
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6104
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6108
  def format(q); end

  # [String] the value of the label
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6083
  def value; end
end

# LabelEnd represents the end of a dynamic symbol.
#
#     { "key": value }
#
# In the example above, LabelEnd represents the "\":" token at the end of the
# hash key. This node is important for determining the type of quote being
# used by the label.
#
# source://syntax_tree//lib/syntax_tree/node.rb#6121
class SyntaxTree::LabelEnd < ::SyntaxTree::Node
  # @return [LabelEnd] a new instance of LabelEnd
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6124
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6129
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6133
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6133
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6139
  def deconstruct_keys(_keys); end

  # [String] the end of the label
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6122
  def value; end
end

# Lambda represents using a lambda literal (not the lambda method call).
#
#     ->(value) { value * 2 }
#
# source://syntax_tree//lib/syntax_tree/node.rb#6149
class SyntaxTree::Lambda < ::SyntaxTree::Node
  # @return [Lambda] a new instance of Lambda
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6158
  def initialize(params:, statements:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6165
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6169
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6156
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6169
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6175
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6184
  def format(q); end

  # [LambdaVar | Paren] the parameter declaration for this lambda
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6150
  def params; end

  # [BodyStmt | Statements] the expressions to be executed in this lambda
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6153
  def statements; end
end

# LambdaVar represents the parameters being declared for a lambda. Effectively
# this node is everything contained within the parentheses. This includes all
# of the various parameter types, as well as block-local variable
# declarations.
#
#     -> (positional, optional = value, keyword:, &block; local) do
#     end
#
# source://syntax_tree//lib/syntax_tree/node.rb#6257
class SyntaxTree::LambdaVar < ::SyntaxTree::Node
  # @return [LambdaVar] a new instance of LambdaVar
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6266
  def initialize(params:, locals:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6273
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6277
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6264
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6277
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6283
  def deconstruct_keys(_keys); end

  # @return [Boolean]
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6287
  def empty?; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6291
  def format(q); end

  # [Array[ Ident ]] the list of block-local variable declarations
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6261
  def locals; end

  # [Params] the parameters being declared with the block
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6258
  def params; end
end

# Represents the location of a node in the tree from the source code.
#
# source://syntax_tree//lib/syntax_tree/node.rb#5
class SyntaxTree::Location
  # @return [Location] a new instance of Location
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#13
  def initialize(start_line:, start_char:, start_column:, end_line:, end_char:, end_column:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#33
  def ==(other); end

  # source://syntax_tree//lib/syntax_tree/node.rb#50
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#54
  def deconstruct_keys(_keys); end

  # Returns the value of attribute end_char.
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6
  def end_char; end

  # Returns the value of attribute end_column.
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6
  def end_column; end

  # Returns the value of attribute end_line.
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6
  def end_line; end

  # source://syntax_tree//lib/syntax_tree/node.rb#29
  def lines; end

  # Returns the value of attribute start_char.
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6
  def start_char; end

  # Returns the value of attribute start_column.
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6
  def start_column; end

  # Returns the value of attribute start_line.
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6
  def start_line; end

  # source://syntax_tree//lib/syntax_tree/node.rb#39
  def to(other); end

  class << self
    # source://syntax_tree//lib/syntax_tree/node.rb#76
    def fixed(line:, char:, column:); end

    # source://syntax_tree//lib/syntax_tree/node.rb#65
    def token(line:, char:, column:, size:); end
  end
end

# Formats an Until, UntilMod, While, or WhileMod node.
#
# source://syntax_tree//lib/syntax_tree/node.rb#9494
class SyntaxTree::LoopFormatter
  # @return [LoopFormatter] a new instance of LoopFormatter
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9504
  def initialize(keyword, node, statements); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9510
  def format(q); end

  # [String] the name of the keyword used for this loop
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9496
  def keyword; end

  # [Until | UntilMod | While | WhileMod] the node that is being formatted
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9499
  def node; end

  # [untyped] the statements associated with the node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9502
  def statements; end

  private

  # source://syntax_tree//lib/syntax_tree/node.rb#9532
  def format_break(q); end
end

# MAssign is a parent node of any kind of multiple assignment. This includes
# splitting out variables on the left like:
#
#     first, second, third = value
#
# as well as splitting out variables on the right, as in:
#
#     value = first, second, third
#
# Both sides support splats, as well as variables following them. There's also
# destructuring behavior that you can achieve with the following:
#
#     first, = value
#
# source://syntax_tree//lib/syntax_tree/node.rb#6415
class SyntaxTree::MAssign < ::SyntaxTree::Node
  # @return [MAssign] a new instance of MAssign
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6424
  def initialize(target:, value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6431
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6435
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6422
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6435
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6441
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6445
  def format(q); end

  # [MLHS | MLHSParen] the target of the multiple assignment
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6416
  def target; end

  # [untyped] the value being assigned
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6419
  def value; end
end

# MLHS represents a list of values being destructured on the left-hand side
# of a multiple assignment.
#
#     first, second, third = value
#
# source://syntax_tree//lib/syntax_tree/node.rb#6521
class SyntaxTree::MLHS < ::SyntaxTree::Node
  # @return [MLHS] a new instance of MLHS
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6532
  def initialize(parts:, location:, comma: T.unsafe(nil), comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6539
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6543
  def child_nodes; end

  # [boolean] whether or not there is a trailing comma at the end of this
  # list, which impacts destructuring. It's an attr_accessor so that while
  # the syntax tree is being built it can be set by its parent node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6527
  def comma; end

  # [boolean] whether or not there is a trailing comma at the end of this
  # list, which impacts destructuring. It's an attr_accessor so that while
  # the syntax tree is being built it can be set by its parent node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6527
  def comma=(_arg0); end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6530
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6543
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6549
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6553
  def format(q); end

  # Array[ARefField | ArgStar | Field | Ident | MLHSParen | VarField] the
  # parts of the left-hand side of a multiple assignment
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6522
  def parts; end
end

# MLHSParen represents parentheses being used to destruct values in a multiple
# assignment on the left hand side.
#
#     (left, right) = value
#
# source://syntax_tree//lib/syntax_tree/node.rb#6565
class SyntaxTree::MLHSParen < ::SyntaxTree::Node
  # @return [MLHSParen] a new instance of MLHSParen
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6576
  def initialize(contents:, location:, comma: T.unsafe(nil), comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6583
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6587
  def child_nodes; end

  # [boolean] whether or not there is a trailing comma at the end of this
  # list, which impacts destructuring. It's an attr_accessor so that while
  # the syntax tree is being built it can be set by its parent node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6571
  def comma; end

  # [boolean] whether or not there is a trailing comma at the end of this
  # list, which impacts destructuring. It's an attr_accessor so that while
  # the syntax tree is being built it can be set by its parent node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6571
  def comma=(_arg0); end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6574
  def comments; end

  # [MLHS | MLHSParen] the contents inside of the parentheses
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6566
  def contents; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6587
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6593
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6597
  def format(q); end
end

# MRHS represents the values that are being assigned on the right-hand side of
# a multiple assignment.
#
#     values = first, second, third
#
# source://syntax_tree//lib/syntax_tree/node.rb#6698
class SyntaxTree::MRHS < ::SyntaxTree::Node
  # @return [MRHS] a new instance of MRHS
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6704
  def initialize(parts:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6710
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6714
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6702
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6714
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6720
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6724
  def format(q); end

  # Array[untyped] the parts that are being assigned
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6699
  def parts; end
end

# MethodAddBlock represents a method call with a block argument.
#
#     method {}
#
# source://syntax_tree//lib/syntax_tree/node.rb#6462
class SyntaxTree::MethodAddBlock < ::SyntaxTree::Node
  # @return [MethodAddBlock] a new instance of MethodAddBlock
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6471
  def initialize(call:, block:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6478
  def accept(visitor); end

  # [BraceBlock | DoBlock] the block being sent with the method call
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6466
  def block; end

  # [Call | Command | CommandCall | FCall] the method call
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6463
  def call; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6482
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6469
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6482
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6488
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6492
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6508
  def format_contents(q); end
end

# ModuleDeclaration represents defining a module using the +module+ keyword.
#
#     module Namespace
#     end
#
# source://syntax_tree//lib/syntax_tree/node.rb#6625
class SyntaxTree::ModuleDeclaration < ::SyntaxTree::Node
  # @return [ModuleDeclaration] a new instance of ModuleDeclaration
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6634
  def initialize(constant:, bodystmt:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6641
  def accept(visitor); end

  # [BodyStmt] the expressions to be executed in the context of the module
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6629
  def bodystmt; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6645
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6632
  def comments; end

  # [ConstPathRef | ConstRef | TopConstRef] the name of the module
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6626
  def constant; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6645
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6651
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6660
  def format(q); end

  private

  # source://syntax_tree//lib/syntax_tree/node.rb#6684
  def format_declaration(q); end
end

# Next represents using the +next+ keyword.
#
#     next
#
# The +next+ keyword can also optionally be called with an argument:
#
#     next value
#
# +next+ can even be called with multiple arguments, but only if parentheses
# are omitted, as in:
#
#     next first, second, third
#
# If a single value is being given, parentheses can be used, as in:
#
#     next(value)
#
# source://syntax_tree//lib/syntax_tree/node.rb#6747
class SyntaxTree::Next < ::SyntaxTree::Node
  # @return [Next] a new instance of Next
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6753
  def initialize(arguments:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6759
  def accept(visitor); end

  # [Args] the arguments passed to the next keyword
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6748
  def arguments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6763
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6751
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6763
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6769
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6773
  def format(q); end
end

# This is the parent node of all of the syntax tree nodes. It's pretty much
# exclusively here to make it easier to operate with the tree in cases where
# you're trying to monkey-patch or strictly type.
#
# source://syntax_tree//lib/syntax_tree/node.rb#91
class SyntaxTree::Node
  # @raise [NotImplementedError]
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#95
  def accept(visitor); end

  # @raise [NotImplementedError]
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#99
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#125
  def construct_keys; end

  # @raise [NotImplementedError]
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#103
  def deconstruct; end

  # @raise [NotImplementedError]
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#107
  def deconstruct_keys(keys); end

  # @raise [NotImplementedError]
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#111
  def format(q); end

  # [Location] the location of this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#93
  def location; end

  # source://syntax_tree//lib/syntax_tree/node.rb#115
  def pretty_print(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#120
  def to_json(*opts); end
end

# Not represents the unary +not+ method being called on an expression.
#
#     not value
#
# source://syntax_tree//lib/syntax_tree/node.rb#9215
class SyntaxTree::Not < ::SyntaxTree::Node
  # @return [Not] a new instance of Not
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9225
  def initialize(statement:, parentheses:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9232
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9236
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9223
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9236
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9242
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9251
  def format(q); end

  # [boolean] whether or not parentheses were used
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9219
  def parentheses; end

  # [boolean] whether or not parentheses were used
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9219
  def parentheses?; end

  # [nil | untyped] the statement on which to operate
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9216
  def statement; end
end

# Op represents an operator literal in the source.
#
#     1 + 2
#
# In the example above, the Op node represents the + operator.
#
# source://syntax_tree//lib/syntax_tree/node.rb#6784
class SyntaxTree::Op < ::SyntaxTree::Node
  # @return [Op] a new instance of Op
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6793
  def initialize(value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6800
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6804
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6791
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6804
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6810
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6814
  def format(q); end

  # [Symbol] the symbol version of the value
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6788
  def name; end

  # [String] the operator
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6785
  def value; end
end

# OpAssign represents assigning a value to a variable or constant using an
# operator like += or ||=.
#
#     variable += value
#
# source://syntax_tree//lib/syntax_tree/node.rb#6826
class SyntaxTree::OpAssign < ::SyntaxTree::Node
  # @return [OpAssign] a new instance of OpAssign
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6838
  def initialize(target:, operator:, value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6846
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6850
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6836
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6850
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6856
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6866
  def format(q); end

  # [Op] the operator being used for the assignment
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6830
  def operator; end

  # [ARefField | ConstPathField | Field | TopConstField | VarField] the target
  # to assign the result of the expression to
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6827
  def target; end

  # [untyped] the expression to be assigned
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6833
  def value; end

  private

  # @return [Boolean]
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6886
  def skip_indent?; end
end

# The list of nodes that represent patterns inside of pattern matching so that
# when a pattern is being printed it knows if it's nested.
#
# source://syntax_tree//lib/syntax_tree/node.rb#5294
SyntaxTree::PATTERNS = T.let(T.unsafe(nil), Array)

# Params represents defining parameters on a method or lambda.
#
#     def method(param) end
#
# source://syntax_tree//lib/syntax_tree/node.rb#6966
class SyntaxTree::Params < ::SyntaxTree::Node
  # @return [Params] a new instance of Params
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7065
  def initialize(location:, requireds: T.unsafe(nil), optionals: T.unsafe(nil), rest: T.unsafe(nil), posts: T.unsafe(nil), keywords: T.unsafe(nil), keyword_rest: T.unsafe(nil), block: T.unsafe(nil), comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7096
  def accept(visitor); end

  # [nil | BlockArg] the optional block parameter
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7060
  def block; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7100
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7063
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7100
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7114
  def deconstruct_keys(_keys); end

  # Params nodes are the most complicated in the tree. Occasionally you want
  # to know if they are "empty", which means not having any parameters
  # declared. This logic accesses every kind of parameter and determines if
  # it's missing.
  #
  # @return [Boolean]
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7091
  def empty?; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7128
  def format(q); end

  # [nil | :nil | KwRestParam] the optional keyword rest parameter
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7057
  def keyword_rest; end

  # [Array[ [ Ident, nil | untyped ] ]] any keyword parameters and their
  # optional default values
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7054
  def keywords; end

  # [Array[ [ Ident, untyped ] ]] any optional parameters and their default
  # values
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7042
  def optionals; end

  # [Array[ Ident ]] any positional parameters that exist after a rest
  # parameter
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7050
  def posts; end

  # [Array[ Ident ]] any required parameters
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7038
  def requireds; end

  # [nil | ArgsForward | ExcessedComma | RestParam] the optional rest
  # parameter
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7046
  def rest; end

  private

  # source://syntax_tree//lib/syntax_tree/node.rb#7168
  def format_contents(q, parts); end
end

# Formats the keyword position of the parameters. This includes the label,
# as well as an optional default value.
#
# source://syntax_tree//lib/syntax_tree/node.rb#6992
class SyntaxTree::Params::KeywordFormatter
  # @return [KeywordFormatter] a new instance of KeywordFormatter
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6999
  def initialize(name, value); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7004
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7008
  def format(q); end

  # [Ident] the name of the parameter
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6994
  def name; end

  # [nil | untyped] the value of the parameter
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6997
  def value; end
end

# Formats the keyword_rest position of the parameters. This can be the **nil
# syntax, the ... syntax, or the ** syntax.
#
# source://syntax_tree//lib/syntax_tree/node.rb#7020
class SyntaxTree::Params::KeywordRestFormatter
  # @return [KeywordRestFormatter] a new instance of KeywordRestFormatter
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7024
  def initialize(value); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7028
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7032
  def format(q); end

  # [:nil | ArgsForward | KwRestParam] the value of the parameter
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7022
  def value; end
end

# Formats the optional position of the parameters. This includes the label,
# as well as the default value.
#
# source://syntax_tree//lib/syntax_tree/node.rb#6967
class SyntaxTree::Params::OptionalFormatter
  # @return [OptionalFormatter] a new instance of OptionalFormatter
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6974
  def initialize(name, value); end

  # source://syntax_tree//lib/syntax_tree/node.rb#6979
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#6983
  def format(q); end

  # [Ident] the name of the parameter
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6969
  def name; end

  # [untyped] the value of the parameter
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#6972
  def value; end
end

# Paren represents using balanced parentheses in a couple places in a Ruby
# program. In general parentheses can be used anywhere a Ruby expression can
# be used.
#
#     (1 + 2)
#
# source://syntax_tree//lib/syntax_tree/node.rb#7181
class SyntaxTree::Paren < ::SyntaxTree::Node
  # @return [Paren] a new instance of Paren
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7190
  def initialize(lparen:, contents:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7197
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7201
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7188
  def comments; end

  # [nil | untyped] the expression inside the parentheses
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7185
  def contents; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7201
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7207
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7216
  def format(q); end

  # [LParen] the left parenthesis that opened this statement
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7182
  def lparen; end
end

# If you have a modifier statement (for instance a modifier if statement or a
# modifier while loop) there are times when you need to wrap the entire
# statement in parentheses. This occurs when you have something like:
#
#     foo[:foo] =
#       if bar?
#         baz
#       end
#
# Normally we would shorten this to an inline version, which would result in:
#
#     foo[:foo] = baz if bar?
#
# but this actually has different semantic meaning. The first example will
# result in a nil being inserted into the hash for the :foo key, whereas the
# second example will result in an empty hash because the if statement applies
# to the entire assignment.
#
# We can fix this in a couple of ways. We can use the then keyword, as in:
#
#     foo[:foo] = if bar? then baz end
#
# But this isn't used very often. We can also just leave it as is with the
# multi-line version, but for a short predicate and short value it looks
# verbose. The last option and the one used here is to add parentheses on
# both sides of the expression, as in:
#
#     foo[:foo] = (baz if bar?)
#
# This approach maintains the nice conciseness of the inline version, while
# keeping the correct semantic meaning.
#
# source://syntax_tree//lib/syntax_tree/node.rb#6923
module SyntaxTree::Parentheses
  class << self
    # source://syntax_tree//lib/syntax_tree/node.rb#6943
    def break(q); end

    # source://syntax_tree//lib/syntax_tree/node.rb#6935
    def flat(q); end
  end
end

# source://syntax_tree//lib/syntax_tree/node.rb#6924
SyntaxTree::Parentheses::NODES = T.let(T.unsafe(nil), Array)

# Parser is a subclass of the Ripper library that subscribes to the stream of
# tokens and nodes coming from the parser and builds up a syntax tree.
#
# source://syntax_tree//lib/syntax_tree/parser.rb#8
class SyntaxTree::Parser < ::Ripper
  # @return [Parser] a new instance of Parser
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#116
  def initialize(source, *_arg1); end

  # [Array[ Comment | EmbDoc ]] the list of comments that have been found
  # while parsing the source.
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#114
  def comments; end

  # [Array[ SingleByteString | MultiByteString ]] the list of objects that
  # represent the start of each line in character offsets
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#105
  def line_counts; end

  # [String] the source being parsed
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#101
  def source; end

  # [Array[ untyped ]] a running list of tokens that have been found in the
  # source. This list changes a lot as certain nodes will "consume" these
  # tokens to determine their bounds.
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#110
  def tokens; end

  private

  # Attaches comments to the nodes in the tree that most closely correspond to
  # the location of the comments.
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2676
  def attach_comments(program, comments); end

  # This represents the current place in the source string that we've gotten
  # to so far. We have a memoized line_counts object that we can use to get
  # the number of characters that we've had to go through to get to the
  # beginning of this line, then we add the number of columns into this line
  # that we've gone through.
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#197
  def char_pos; end

  # @raise [ParseError]
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#269
  def consume_error(name, location); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#286
  def consume_keyword(name); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#292
  def consume_operator(name); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#274
  def consume_token(type); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#280
  def consume_tstring_end(location); end

  # This represents the current column we're in relative to the beginning of
  # the current line.
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#203
  def current_column; end

  # A helper function to find a :: operator. We do special handling instead of
  # using find_token here because we don't pop off all of the :: operators so
  # you could end up getting the wrong information if you have for instance
  # ::X::Y::Z.
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#302
  def find_colon2_before(const); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#259
  def find_keyword(name); end

  # Finds the next position in the source string that begins a statement. This
  # is used to bind statements lists and make sure they don't include a
  # preceding comment. For example, we want the following comment to be
  # attached to the class node and not the statement node:
  #
  #       ...
  #     end
  #
  # By finding the next non-space character, we can make sure that the bounds
  # of the statement list are correct.
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#323
  def find_next_statement_start(position); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#264
  def find_operator(name); end

  # As we build up a list of tokens, we'll periodically need to go backwards
  # and find the ones that we've already hit in order to determine the
  # location information for nodes that use them. For example, if you have a
  # module node then you'll look backward for a kw token to determine your
  # start location.
  #
  # This works with nesting since we're deleting tokens from the list once
  # they've been used up. For example if you had nested module declarations
  # then the innermost declaration would grab the last kw node that matches
  # "module" (which would happen to be the innermost keyword). Then the outer
  # one would only be able to grab the first one. In this way all of the
  # tokens act as their own stack.
  #
  # If we're expecting to be able to find a token and consume it, but can't
  # actually find it, then we need to raise an error. This is _usually_ caused
  # by a syntax error in the source that we're printing. It could also be
  # caused by accidentally attempting to consume a token twice by two
  # different parser event handlers.
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#254
  def find_token(type); end

  # Returns the current location that is being looked at for the parser for
  # the purpose of locating the error.
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#210
  def find_token_error(location); end

  # Ripper doesn't support capturing lambda local variables until 3.2. To
  # mitigate this, we have to parse that code for ourselves. We use the range
  # from the parentheses to find where we _should_ be looking. Then we check
  # if the resulting tokens match a pattern that we determine means that the
  # declaration has block-local variables. Once it does, we parse those out
  # and convert them into Ident nodes.
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2167
  def lambda_locals(source); end

  # Responsible for finding the nearest nodes to the given comment within the
  # context of the given encapsulating node.
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2711
  def nearest_nodes(node, comment); end

  # :call-seq:
  #   on_BEGIN: (Statements statements) -> BEGINBlock
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#345
  def on_BEGIN(statements); end

  # :call-seq:
  #   on_CHAR: (String value) -> CHAR
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#368
  def on_CHAR(value); end

  # :call-seq:
  #   on_END: (Statements statements) -> ENDBlock
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#383
  def on_END(statements); end

  # :call-seq:
  #   on___end__: (String value) -> EndContent
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#406
  def on___end__(value); end

  # :call-seq:
  #   on_alias: (
  #     (DynaSymbol | SymbolLiteral) left,
  #     (DynaSymbol | SymbolLiteral) right
  #   ) -> Alias
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#425
  def on_alias(left, right); end

  # If we encounter a parse error, just immediately bail out so that our
  # runner can catch it.
  #
  # @raise [ParseError]
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2628
  def on_alias_error(error, *_arg1); end

  # :call-seq:
  #   on_aref: (untyped collection, (nil | Args) index) -> ARef
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#437
  def on_aref(collection, index); end

  # :call-seq:
  #   on_aref_field: (
  #     untyped collection,
  #     (nil | Args) index
  #   ) -> ARefField
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#453
  def on_aref_field(collection, index); end

  # :call-seq:
  #   on_arg_paren: (
  #     (nil | Args | ArgsForward) arguments
  #   ) -> ArgParen
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#472
  def on_arg_paren(arguments); end

  # :call-seq:
  #   on_args_add: (Args arguments, untyped argument) -> Args
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#494
  def on_args_add(arguments, argument); end

  # :call-seq:
  #   on_args_add_block: (
  #     Args arguments,
  #     (false | untyped) block
  #   ) -> Args
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#515
  def on_args_add_block(arguments, block); end

  # :call-seq:
  #   on_args_add_star: (Args arguments, untyped star) -> Args
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#553
  def on_args_add_star(arguments, argument); end

  # :call-seq:
  #   on_args_forward: () -> ArgsForward
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#575
  def on_args_forward; end

  # :call-seq:
  #   on_args_new: () -> Args
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#583
  def on_args_new; end

  # :call-seq:
  #   on_array: ((nil | Args) contents) ->
  #     ArrayLiteral | QSymbols | QWords | Symbols | Words
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#594
  def on_array(contents); end

  # :call-seq:
  #   on_aryptn: (
  #     (nil | VarRef) constant,
  #     (nil | Array[untyped]) requireds,
  #     (nil | VarField) rest,
  #     (nil | Array[untyped]) posts
  #   ) -> AryPtn
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#672
  def on_aryptn(constant, requireds, rest, posts); end

  # :call-seq:
  #   on_assign: (
  #     (
  #       ARefField |
  #       ConstPathField |
  #       Field |
  #       TopConstField |
  #       VarField
  #     ) target,
  #     untyped value
  #   ) -> Assign
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#723
  def on_assign(target, value); end

  # If we encounter a parse error, just immediately bail out so that our
  # runner can catch it.
  #
  # @raise [ParseError]
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2628
  def on_assign_error(error, *_arg1); end

  # :call-seq:
  #   on_assoc_new: (untyped key, untyped value) -> Assoc
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#733
  def on_assoc_new(key, value); end

  # :call-seq:
  #   on_assoc_splat: (untyped value) -> AssocSplat
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#742
  def on_assoc_splat(value); end

  # :call-seq:
  #   on_backref: (String value) -> Backref
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#757
  def on_backref(value); end

  # :call-seq:
  #   on_backtick: (String value) -> Backtick
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#772
  def on_backtick(value); end

  # :call-seq:
  #   on_bare_assoc_hash: (
  #     Array[AssocNew | AssocSplat] assocs
  #   ) -> BareAssocHash
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#793
  def on_bare_assoc_hash(assocs); end

  # :call-seq:
  #   on_begin: (untyped bodystmt) -> Begin | PinnedBegin
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#802
  def on_begin(bodystmt); end

  # :call-seq:
  #   on_binary: (
  #     untyped left,
  #     (Op | Symbol) operator,
  #     untyped right
  #   ) -> Binary
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#840
  def on_binary(left, operator, right); end

  # :call-seq:
  #   on_block_var: (Params params, (nil | Array[Ident]) locals) -> BlockVar
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#872
  def on_block_var(params, locals); end

  # :call-seq:
  #   on_blockarg: (Ident name) -> BlockArg
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#891
  def on_blockarg(name); end

  # :call-seq:
  #   on_bodystmt: (
  #     Statements statements,
  #     (nil | Rescue) rescue_clause,
  #     (nil | Statements) else_clause,
  #     (nil | Ensure) ensure_clause
  #   ) -> BodyStmt
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#907
  def on_bodystmt(statements, rescue_clause, else_clause, ensure_clause); end

  # :call-seq:
  #   on_brace_block: (
  #     (nil | BlockVar) block_var,
  #     Statements statements
  #   ) -> BraceBlock
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#924
  def on_brace_block(block_var, statements); end

  # :call-seq:
  #   on_break: (Args arguments) -> Break
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#960
  def on_break(arguments); end

  # :call-seq:
  #   on_call: (
  #     untyped receiver,
  #     (:"::" | Op | Period) operator,
  #     (:call | Backtick | Const | Ident | Op) message
  #   ) -> Call
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#975
  def on_call(receiver, operator, message); end

  # :call-seq:
  #   on_case: (untyped value, untyped consequent) -> Case | RAssign
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#996
  def on_case(value, consequent); end

  # :call-seq:
  #   on_class: (
  #     (ConstPathRef | ConstRef | TopConstRef) constant,
  #     untyped superclass,
  #     BodyStmt bodystmt
  #   ) -> ClassDeclaration
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1033
  def on_class(constant, superclass, bodystmt); end

  # If we encounter a parse error, just immediately bail out so that our
  # runner can catch it.
  #
  # @raise [ParseError]
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2628
  def on_class_name_error(error, *_arg1); end

  # :call-seq:
  #   on_comma: (String value) -> Comma
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1056
  def on_comma(value); end

  # :call-seq:
  #   on_command: ((Const | Ident) message, Args arguments) -> Command
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1075
  def on_command(message, arguments); end

  # :call-seq:
  #   on_command_call: (
  #     untyped receiver,
  #     (:"::" | Op | Period) operator,
  #     (Const | Ident | Op) message,
  #     (nil | Args) arguments
  #   ) -> CommandCall
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1090
  def on_command_call(receiver, operator, message, arguments); end

  # :call-seq:
  #   on_comment: (String value) -> Comment
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1104
  def on_comment(value); end

  # :call-seq:
  #   on_const: (String value) -> Const
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1125
  def on_const(value); end

  # :call-seq:
  #   on_const_path_field: (untyped parent, Const constant) -> ConstPathField
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1140
  def on_const_path_field(parent, constant); end

  # :call-seq:
  #   on_const_path_ref: (untyped parent, Const constant) -> ConstPathRef
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1150
  def on_const_path_ref(parent, constant); end

  # :call-seq:
  #   on_const_ref: (Const constant) -> ConstRef
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1160
  def on_const_ref(constant); end

  # :call-seq:
  #   on_cvar: (String value) -> CVar
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1166
  def on_cvar(value); end

  # :call-seq:
  #   on_def: (
  #     (Backtick | Const | Ident | Kw | Op) name,
  #     (nil | Params | Paren) params,
  #     untyped bodystmt
  #   ) -> Def | DefEndless
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1185
  def on_def(name, params, bodystmt); end

  # :call-seq:
  #   on_defined: (untyped value) -> Defined
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1250
  def on_defined(value); end

  # :call-seq:
  #   on_defs: (
  #     untyped target,
  #     (Op | Period) operator,
  #     (Backtick | Const | Ident | Kw | Op) name,
  #     (Params | Paren) params,
  #     BodyStmt bodystmt
  #   ) -> Defs
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1274
  def on_defs(target, operator, name, params, bodystmt); end

  # :call-seq:
  #   on_do_block: (BlockVar block_var, BodyStmt bodystmt) -> DoBlock
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1338
  def on_do_block(block_var, bodystmt); end

  # :call-seq:
  #   on_dot2: ((nil | untyped) left, (nil | untyped) right) -> Dot2
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1361
  def on_dot2(left, right); end

  # :call-seq:
  #   on_dot3: ((nil | untyped) left, (nil | untyped) right) -> Dot3
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1376
  def on_dot3(left, right); end

  # :call-seq:
  #   on_dyna_symbol: (StringContent string_content) -> DynaSymbol
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1391
  def on_dyna_symbol(string_content); end

  # :call-seq:
  #   on_else: (Statements statements) -> Else
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1417
  def on_else(statements); end

  # :call-seq:
  #   on_elsif: (
  #     untyped predicate,
  #     Statements statements,
  #     (nil | Elsif | Else) consequent
  #   ) -> Elsif
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1457
  def on_elsif(predicate, statements, consequent); end

  # :call-seq:
  #   on_embdoc: (String value) -> EmbDoc
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1479
  def on_embdoc(value); end

  # :call-seq:
  #   on_embdoc_beg: (String value) -> EmbDoc
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1486
  def on_embdoc_beg(value); end

  # :call-seq:
  #   on_embdoc_end: (String value) -> EmbDoc
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1497
  def on_embdoc_end(value); end

  # :call-seq:
  #   on_embexpr_beg: (String value) -> EmbExprBeg
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1521
  def on_embexpr_beg(value); end

  # :call-seq:
  #   on_embexpr_end: (String value) -> EmbExprEnd
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1540
  def on_embexpr_end(value); end

  # :call-seq:
  #   on_embvar: (String value) -> EmbVar
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1559
  def on_embvar(value); end

  # :call-seq:
  #   on_ensure: (Statements statements) -> Ensure
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1578
  def on_ensure(statements); end

  # The handler for this event accepts no parameters (though in previous
  # versions of Ruby it accepted a string literal with a value of ",").
  #
  # :call-seq:
  #   on_excessed_comma: () -> ExcessedComma
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1604
  def on_excessed_comma(*_arg0); end

  # :call-seq:
  #   on_fcall: ((Const | Ident) value) -> FCall
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1612
  def on_fcall(value); end

  # :call-seq:
  #   on_field: (
  #     untyped parent,
  #     (:"::" | Op | Period) operator
  #     (Const | Ident) name
  #   ) -> Field
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1622
  def on_field(parent, operator, name); end

  # :call-seq:
  #   on_float: (String value) -> FloatLiteral
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1633
  def on_float(value); end

  # :call-seq:
  #   on_fndptn: (
  #     (nil | untyped) constant,
  #     VarField left,
  #     Array[untyped] values,
  #     VarField right
  #   ) -> FndPtn
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1653
  def on_fndptn(constant, left, values, right); end

  # :call-seq:
  #   on_for: (
  #     (MLHS | VarField) value,
  #     untyped collection,
  #     Statements statements
  #   ) -> For
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1689
  def on_for(index, collection, statements); end

  # :call-seq:
  #   on_gvar: (String value) -> GVar
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1728
  def on_gvar(value); end

  # :call-seq:
  #   on_hash: ((nil | Array[AssocNew | AssocSplat]) assocs) -> HashLiteral
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1743
  def on_hash(assocs); end

  # :call-seq:
  #   on_heredoc_beg: (String value) -> HeredocBeg
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1756
  def on_heredoc_beg(value); end

  # :call-seq:
  #   on_heredoc_dedent: (StringContent string, Integer width) -> Heredoc
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1775
  def on_heredoc_dedent(string, width); end

  # :call-seq:
  #   on_heredoc_end: (String value) -> Heredoc
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1789
  def on_heredoc_end(value); end

  # :call-seq:
  #   on_hshptn: (
  #     (nil | untyped) constant,
  #     Array[[Label, untyped]] keywords,
  #     (nil | VarField) keyword_rest
  #   ) -> HshPtn
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1825
  def on_hshptn(constant, keywords, keyword_rest); end

  # :call-seq:
  #   on_ident: (String value) -> Ident
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1863
  def on_ident(value); end

  # :call-seq:
  #   on_if: (
  #     untyped predicate,
  #     Statements statements,
  #     (nil | Elsif | Else) consequent
  #   ) -> If
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1882
  def on_if(predicate, statements, consequent); end

  # :call-seq:
  #   on_if_mod: (untyped predicate, untyped statement) -> IfMod
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1915
  def on_if_mod(predicate, statement); end

  # :call-seq:
  #   on_ifop: (untyped predicate, untyped truthy, untyped falsy) -> IfOp
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1904
  def on_ifop(predicate, truthy, falsy); end

  # :call-seq:
  #   on_imaginary: (String value) -> Imaginary
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1935
  def on_imaginary(value); end

  # :call-seq:
  #   on_in: (RAssign pattern, nil statements, nil consequent) -> RAssign
  #        | (
  #            untyped pattern,
  #            Statements statements,
  #            (nil | In | Else) consequent
  #          ) -> In
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1955
  def on_in(pattern, statements, consequent); end

  # :call-seq:
  #   on_int: (String value) -> Int
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#1991
  def on_int(value); end

  # :call-seq:
  #   on_ivar: (String value) -> IVar
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2006
  def on_ivar(value); end

  # :call-seq:
  #   on_kw: (String value) -> Kw
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2021
  def on_kw(value); end

  # :call-seq:
  #   on_kwrest_param: ((nil | Ident) name) -> KwRestParam
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2040
  def on_kwrest_param(name); end

  # :call-seq:
  #   on_label: (String value) -> Label
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2049
  def on_label(value); end

  # :call-seq:
  #   on_label_end: (String value) -> LabelEnd
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2064
  def on_label_end(value); end

  # :call-seq:
  #   on_lambda: (
  #     (Params | Paren) params,
  #     (BodyStmt | Statements) statements
  #   ) -> Lambda
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2086
  def on_lambda(params, statements); end

  # :call-seq:
  #   on_lambda_var: (Params params, Array[ Ident ] locals) -> LambdaVar
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2154
  def on_lambda_var(params, locals); end

  # :call-seq:
  #   on_lbrace: (String value) -> LBrace
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2231
  def on_lbrace(value); end

  # :call-seq:
  #   on_lbracket: (String value) -> LBracket
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2250
  def on_lbracket(value); end

  # :call-seq:
  #   on_lparen: (String value) -> LParen
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2269
  def on_lparen(value); end

  # :call-seq:
  #   on_massign: ((MLHS | MLHSParen) target, untyped value) -> MAssign
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2292
  def on_massign(target, value); end

  # :call-seq:
  #   on_method_add_arg: (
  #     (Call | FCall) call,
  #     (ArgParen | Args) arguments
  #   ) -> Call | FCall
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2308
  def on_method_add_arg(call, arguments); end

  # :call-seq:
  #   on_method_add_block: (
  #     (Call | Command | CommandCall | FCall) call,
  #     (BraceBlock | DoBlock) block
  #   ) -> MethodAddBlock
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2330
  def on_method_add_block(call, block); end

  # :call-seq:
  #   on_mlhs_add: (
  #     MLHS mlhs,
  #     (ARefField | Field | Ident | MLHSParen | VarField) part
  #   ) -> MLHS
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2343
  def on_mlhs_add(mlhs, part); end

  # :call-seq:
  #   on_mlhs_add_post: (MLHS left, MLHS right) -> MLHS
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2352
  def on_mlhs_add_post(left, right); end

  # :call-seq:
  #   on_mlhs_add_star: (
  #     MLHS mlhs,
  #     (nil | ARefField | Field | Ident | VarField) part
  #   ) -> MLHS
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2364
  def on_mlhs_add_star(mlhs, part); end

  # :call-seq:
  #   on_mlhs_new: () -> MLHS
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2377
  def on_mlhs_new; end

  # :call-seq:
  #   on_mlhs_paren: ((MLHS | MLHSParen) contents) -> MLHSParen
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2387
  def on_mlhs_paren(contents); end

  # :call-seq:
  #   on_module: (
  #     (ConstPathRef | ConstRef | TopConstRef) constant,
  #     BodyStmt bodystmt
  #   ) -> ModuleDeclaration
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2405
  def on_module(constant, bodystmt); end

  # :call-seq:
  #   on_mrhs_add: (MRHS mrhs, untyped part) -> MRHS
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2436
  def on_mrhs_add(mrhs, part); end

  # :call-seq:
  #   on_mrhs_add_star: (MRHS mrhs, untyped value) -> MRHS
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2445
  def on_mrhs_add_star(mrhs, value); end

  # :call-seq:
  #   on_mrhs_new: () -> MRHS
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2426
  def on_mrhs_new; end

  # :call-seq:
  #   on_mrhs_new_from_args: (Args arguments) -> MRHS
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2467
  def on_mrhs_new_from_args(arguments); end

  # :call-seq:
  #   on_next: (Args arguments) -> Next
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2473
  def on_next(arguments); end

  # :call-seq:
  #   on_op: (String value) -> Op
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2492
  def on_op(value); end

  # :call-seq:
  #   on_opassign: (
  #     (
  #       ARefField |
  #       ConstPathField |
  #       Field |
  #       TopConstField |
  #       VarField
  #     ) target,
  #     Op operator,
  #     untyped value
  #   ) -> OpAssign
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2521
  def on_opassign(target, operator, value); end

  # If we encounter a parse error, just immediately bail out so that our
  # runner can catch it.
  #
  # @raise [ParseError]
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2628
  def on_param_error(error, *_arg1); end

  # :call-seq:
  #   on_params: (
  #     (nil | Array[Ident]) requireds,
  #     (nil | Array[[Ident, untyped]]) optionals,
  #     (nil | ArgsForward | ExcessedComma | RestParam) rest,
  #     (nil | Array[Ident]) posts,
  #     (nil | Array[[Ident, nil | untyped]]) keywords,
  #     (nil | :nil | ArgsForward | KwRestParam) keyword_rest,
  #     (nil | :& | BlockArg) block
  #   ) -> Params
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2544
  def on_params(requireds, optionals, rest, posts, keywords, keyword_rest, block); end

  # :call-seq:
  #   on_paren: (untyped contents) -> Paren
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2588
  def on_paren(contents); end

  # If we encounter a parse error, just immediately bail out so that our
  # runner can catch it.
  #
  # @raise [ParseError]
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2628
  def on_parse_error(error, *_arg1); end

  # :call-seq:
  #   on_period: (String value) -> Period
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2638
  def on_period(value); end

  # :call-seq:
  #   on_program: (Statements statements) -> Program
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2653
  def on_program(statements); end

  # :call-seq:
  #   on_qsymbols_add: (QSymbols qsymbols, TStringContent element) -> QSymbols
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2765
  def on_qsymbols_add(qsymbols, element); end

  # :call-seq:
  #   on_qsymbols_beg: (String value) -> QSymbolsBeg
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2775
  def on_qsymbols_beg(value); end

  # :call-seq:
  #   on_qsymbols_new: () -> QSymbols
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2794
  def on_qsymbols_new; end

  # :call-seq:
  #   on_qwords_add: (QWords qwords, TStringContent element) -> QWords
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2806
  def on_qwords_add(qwords, element); end

  # :call-seq:
  #   on_qwords_beg: (String value) -> QWordsBeg
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2816
  def on_qwords_beg(value); end

  # :call-seq:
  #   on_qwords_new: () -> QWords
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2835
  def on_qwords_new; end

  # :call-seq:
  #   on_rational: (String value) -> RationalLiteral
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2847
  def on_rational(value); end

  # :call-seq:
  #   on_rbrace: (String value) -> RBrace
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2862
  def on_rbrace(value); end

  # :call-seq:
  #   on_rbracket: (String value) -> RBracket
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2881
  def on_rbracket(value); end

  # :call-seq:
  #   on_redo: () -> Redo
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2900
  def on_redo; end

  # :call-seq:
  #   on_regexp_add: (
  #     RegexpContent regexp_content,
  #     (StringDVar | StringEmbExpr | TStringContent) part
  #   ) -> RegexpContent
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2911
  def on_regexp_add(regexp_content, part); end

  # :call-seq:
  #   on_regexp_beg: (String value) -> RegexpBeg
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2921
  def on_regexp_beg(value); end

  # :call-seq:
  #   on_regexp_end: (String value) -> RegexpEnd
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2940
  def on_regexp_end(value); end

  # :call-seq:
  #   on_regexp_literal: (
  #     RegexpContent regexp_content,
  #     (nil | RegexpEnd) ending
  #   ) -> RegexpLiteral
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2958
  def on_regexp_literal(regexp_content, ending); end

  # :call-seq:
  #   on_regexp_new: () -> RegexpContent
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2976
  def on_regexp_new; end

  # :call-seq:
  #   on_rescue: (
  #     (nil | [untyped] | MRHS | MRHSAddStar) exceptions,
  #     (nil | Field | VarField) variable,
  #     Statements statements,
  #     (nil | Rescue) consequent
  #   ) -> Rescue
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#2993
  def on_rescue(exceptions, variable, statements, consequent); end

  # :call-seq:
  #   on_rescue_mod: (untyped statement, untyped value) -> RescueMod
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3045
  def on_rescue_mod(statement, value); end

  # :call-seq:
  #   on_rest_param: ((nil | Ident) name) -> RestParam
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3057
  def on_rest_param(name); end

  # :call-seq:
  #   on_retry: () -> Retry
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3066
  def on_retry; end

  # :call-seq:
  #   on_return: (Args arguments) -> Return
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3074
  def on_return(arguments); end

  # :call-seq:
  #   on_return0: () -> Return0
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3085
  def on_return0; end

  # :call-seq:
  #   on_rparen: (String value) -> RParen
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3093
  def on_rparen(value); end

  # :call-seq:
  #   on_sclass: (untyped target, BodyStmt bodystmt) -> SClass
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3112
  def on_sclass(target, bodystmt); end

  # stmts_add is a parser event that represents a single statement inside a
  # list of statements within any lexical block. It accepts as arguments the
  # parent stmts node as well as an stmt which can be any expression in
  # Ruby.
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3143
  def on_stmts_add(statements, statement); end

  # :call-seq:
  #   on_stmts_new: () -> Statements
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3160
  def on_stmts_new; end

  # :call-seq:
  #   on_string_add: (
  #     String string,
  #     (StringEmbExpr | StringDVar | TStringContent) part
  #   ) -> StringContent
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3174
  def on_string_add(string, part); end

  # :call-seq:
  #   on_string_concat: (
  #     (StringConcat | StringLiteral) left,
  #     StringLiteral right
  #   ) -> StringConcat
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3191
  def on_string_concat(left, right); end

  # :call-seq:
  #   on_string_content: () -> StringContent
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3201
  def on_string_content; end

  # :call-seq:
  #   on_string_dvar: ((Backref | VarRef) variable) -> StringDVar
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3211
  def on_string_dvar(variable); end

  # :call-seq:
  #   on_string_embexpr: (Statements statements) -> StringEmbExpr
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3222
  def on_string_embexpr(statements); end

  # :call-seq:
  #   on_string_literal: (String string) -> Heredoc | StringLiteral
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3251
  def on_string_literal(string); end

  # :call-seq:
  #   on_super: ((ArgParen | Args) arguments) -> Super
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3291
  def on_super(arguments); end

  # symbeg is a token that represents the beginning of a symbol literal. In
  # most cases it will contain just ":" as in the value, but if its a dynamic
  # symbol being defined it will contain ":'" or ":\"".
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3303
  def on_symbeg(value); end

  # :call-seq:
  #   on_symbol: (
  #     (Backtick | Const | CVar | GVar | Ident | IVar | Kw | Op) value
  #   ) -> SymbolContent
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3324
  def on_symbol(value); end

  # :call-seq:
  #   on_symbol_literal: (
  #     (
  #       Backtick | Const | CVar | GVar | Ident |
  #       IVar | Kw | Op | SymbolContent
  #     ) value
  #   ) -> SymbolLiteral
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3337
  def on_symbol_literal(value); end

  # :call-seq:
  #   on_symbols_add: (Symbols symbols, Word word) -> Symbols
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3353
  def on_symbols_add(symbols, word); end

  # :call-seq:
  #   on_symbols_beg: (String value) -> SymbolsBeg
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3363
  def on_symbols_beg(value); end

  # :call-seq:
  #   on_symbols_new: () -> Symbols
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3382
  def on_symbols_new; end

  # :call-seq:
  #   on_tlambda: (String value) -> TLambda
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3394
  def on_tlambda(value); end

  # :call-seq:
  #   on_tlambeg: (String value) -> TLamBeg
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3413
  def on_tlambeg(value); end

  # :call-seq:
  #   on_top_const_field: (Const constant) -> TopConstRef
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3432
  def on_top_const_field(constant); end

  # :call-seq:
  #   on_top_const_ref: (Const constant) -> TopConstRef
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3443
  def on_top_const_ref(constant); end

  # :call-seq:
  #   on_tstring_beg: (String value) -> TStringBeg
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3454
  def on_tstring_beg(value); end

  # :call-seq:
  #   on_tstring_content: (String value) -> TStringContent
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3473
  def on_tstring_content(value); end

  # :call-seq:
  #   on_tstring_end: (String value) -> TStringEnd
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3488
  def on_tstring_end(value); end

  # :call-seq:
  #   on_unary: (:not operator, untyped statement) -> Not
  #           | (Symbol operator, untyped statement) -> Unary
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3508
  def on_unary(operator, statement); end

  # :call-seq:
  #   on_undef: (Array[DynaSymbol | SymbolLiteral] symbols) -> Undef
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3551
  def on_undef(symbols); end

  # :call-seq:
  #   on_unless: (
  #     untyped predicate,
  #     Statements statements,
  #     ((nil | Elsif | Else) consequent)
  #   ) -> Unless
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3566
  def on_unless(predicate, statements, consequent); end

  # :call-seq:
  #   on_unless_mod: (untyped predicate, untyped statement) -> UnlessMod
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3588
  def on_unless_mod(predicate, statement); end

  # :call-seq:
  #   on_until: (untyped predicate, Statements statements) -> Until
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3600
  def on_until(predicate, statements); end

  # :call-seq:
  #   on_until_mod: (untyped predicate, untyped statement) -> UntilMod
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3630
  def on_until_mod(predicate, statement); end

  # :call-seq:
  #   on_var_alias: (GVar left, (Backref | GVar) right) -> VarAlias
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3642
  def on_var_alias(left, right); end

  # :call-seq:
  #   on_var_field: (
  #     (nil | Const | CVar | GVar | Ident | IVar) value
  #   ) -> VarField
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3656
  def on_var_field(value); end

  # :call-seq:
  #   on_var_ref: ((Const | CVar | GVar | Ident | IVar | Kw) value) -> VarRef
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3671
  def on_var_ref(value); end

  # :call-seq:
  #   on_vcall: (Ident ident) -> VCall
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3677
  def on_vcall(ident); end

  # :call-seq:
  #   on_void_stmt: () -> VoidStmt
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3683
  def on_void_stmt; end

  # :call-seq:
  #   on_when: (
  #     Args arguments,
  #     Statements statements,
  #     (nil | Else | When) consequent
  #   ) -> When
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3696
  def on_when(arguments, statements, consequent); end

  # :call-seq:
  #   on_while: (untyped predicate, Statements statements) -> While
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3726
  def on_while(predicate, statements); end

  # :call-seq:
  #   on_while_mod: (untyped predicate, untyped statement) -> WhileMod
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3756
  def on_while_mod(predicate, statement); end

  # :call-seq:
  #   on_word_add: (
  #     Word word,
  #     (StringEmbExpr | StringDVar | TStringContent) part
  #   ) -> Word
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3771
  def on_word_add(word, part); end

  # :call-seq:
  #   on_word_new: () -> Word
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3780
  def on_word_new; end

  # :call-seq:
  #   on_words_add: (Words words, Word word) -> Words
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3790
  def on_words_add(words, word); end

  # :call-seq:
  #   on_words_beg: (String value) -> WordsBeg
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3800
  def on_words_beg(value); end

  # :call-seq:
  #   on_words_new: () -> Words
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3819
  def on_words_new; end

  # :call-seq:
  #   on_xstring_add: (
  #     XString xstring,
  #     (StringEmbExpr | StringDVar | TStringContent) part
  #   ) -> XString
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3838
  def on_xstring_add(xstring, part); end

  # :call-seq:
  #   on_xstring_literal: (XString xstring) -> Heredoc | XStringLiteral
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3862
  def on_xstring_literal(xstring); end

  # :call-seq:
  #   on_xstring_new: () -> XString
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3847
  def on_xstring_new; end

  # :call-seq:
  #   on_yield: ((Args | Paren) arguments) -> Yield
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3885
  def on_yield(arguments); end

  # :call-seq:
  #   on_yield0: () -> Yield0
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3896
  def on_yield0; end

  # :call-seq:
  #   on_zsuper: () -> ZSuper
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#3904
  def on_zsuper; end
end

# Represents a line in the source. If this class is being used, it means
# that there are characters in the string that are multi-byte, so we will
# build up an array of indices, such that array[byteindex] will be equal to
# the index of the character within the string.
#
# source://syntax_tree//lib/syntax_tree/parser.rb#38
class SyntaxTree::Parser::MultiByteString
  # @return [MultiByteString] a new instance of MultiByteString
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#41
  def initialize(start, line); end

  # Technically it's possible for the column index to be a negative value if
  # there's a BOM at the beginning of the file, which is the reason we need
  # to compare it to 0 here.
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#55
  def [](byteindex); end

  # Returns the value of attribute indices.
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#39
  def indices; end

  # Returns the value of attribute start.
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#39
  def start; end
end

# A special parser error so that we can get nice syntax displays on the
# error message when prettier prints out the results.
#
# source://syntax_tree//lib/syntax_tree/parser.rb#9
class SyntaxTree::Parser::ParseError < ::StandardError
  # @return [ParseError] a new instance of ParseError
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#12
  def initialize(error, lineno, column); end

  # Returns the value of attribute column.
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#10
  def column; end

  # Returns the value of attribute lineno.
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#10
  def lineno; end
end

# Ugh... I really do not like this class. Basically, ripper doesn't provide
# enough information about where pins are located in the tree. It only gives
# events for ^ ops and var_ref nodes. You have to piece it together
# yourself.
#
# Note that there are edge cases here that we straight up do not address,
# because I honestly think it's going to be faster to write a new parser
# than to address them. For example, this will not work properly:
#
#     foo in ^((bar = 0; bar; baz))
#
# If someone actually does something like that, we'll have to find another
# way to make this work.
#
# source://syntax_tree//lib/syntax_tree/parser.rb#628
class SyntaxTree::Parser::PinVisitor < ::SyntaxTree::Visitor
  # @return [PinVisitor] a new instance of PinVisitor
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#631
  def initialize(pins); end

  # Returns the value of attribute pins.
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#629
  def pins; end

  # Returns the value of attribute stack.
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#629
  def stack; end

  # source://syntax_tree//lib/syntax_tree/parser.rb#636
  def visit(node); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#643
  def visit_var_ref(node); end

  class << self
    # source://syntax_tree//lib/syntax_tree/parser.rb#648
    def visit(node, tokens); end
  end
end

# Represents a line in the source. If this class is being used, it means
# that every character in the string is 1 byte in length, so we can just
# return the start of the line + the index.
#
# source://syntax_tree//lib/syntax_tree/parser.rb#22
class SyntaxTree::Parser::SingleByteString
  # @return [SingleByteString] a new instance of SingleByteString
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#25
  def initialize(start); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#29
  def [](byteindex); end

  # Returns the value of attribute start.
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#23
  def start; end
end

# This represents all of the tokens coming back from the lexer. It is
# replacing a simple array because it keeps track of the last deleted token
# from the list for better error messages.
#
# source://syntax_tree//lib/syntax_tree/parser.rb#63
class SyntaxTree::Parser::TokenList
  # @return [TokenList] a new instance of TokenList
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#66
  def initialize; end

  # source://syntax_tree//lib/syntax_tree/parser.rb#71
  def <<(token); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#75
  def [](index); end

  # @return [Boolean]
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#79
  def any?(&block); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#91
  def delete(value); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#95
  def delete_at(index); end

  # Returns the value of attribute last_deleted.
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#64
  def last_deleted; end

  # source://syntax_tree//lib/syntax_tree/parser.rb#83
  def reverse_each(&block); end

  # source://syntax_tree//lib/syntax_tree/parser.rb#87
  def rindex(&block); end

  # Returns the value of attribute tokens.
  #
  # source://syntax_tree//lib/syntax_tree/parser.rb#64
  def tokens; end
end

# Period represents the use of the +.+ operator. It is usually found in method
# calls.
#
# source://syntax_tree//lib/syntax_tree/node.rb#7236
class SyntaxTree::Period < ::SyntaxTree::Node
  # @return [Period] a new instance of Period
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7242
  def initialize(value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7248
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7252
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7240
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7252
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7258
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7262
  def format(q); end

  # [String] the period
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7237
  def value; end
end

# PinnedBegin represents a pinning a nested statement within pattern matching.
#
#     case value
#     in ^(statement)
#     end
#
# source://syntax_tree//lib/syntax_tree/node.rb#1602
class SyntaxTree::PinnedBegin < ::SyntaxTree::Node
  # @return [PinnedBegin] a new instance of PinnedBegin
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1608
  def initialize(statement:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1614
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1618
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1606
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1618
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#1624
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#1628
  def format(q); end

  # [untyped] the expression being pinned
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#1603
  def statement; end
end

# PinnedVarRef represents a pinned variable reference within a pattern
# matching pattern.
#
#     case value
#     in ^variable
#     end
#
# This can be a plain local variable like the example above. It can also be a
# a class variable, a global variable, or an instance variable.
#
# source://syntax_tree//lib/syntax_tree/node.rb#9827
class SyntaxTree::PinnedVarRef < ::SyntaxTree::Node
  # @return [PinnedVarRef] a new instance of PinnedVarRef
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9833
  def initialize(value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9839
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9843
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9831
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9843
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9849
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9853
  def format(q); end

  # [VarRef] the value of this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9828
  def value; end
end

# Program represents the overall syntax tree.
#
# source://syntax_tree//lib/syntax_tree/node.rb#7269
class SyntaxTree::Program < ::SyntaxTree::Node
  # @return [Program] a new instance of Program
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7275
  def initialize(statements:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7281
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7285
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7273
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7285
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7291
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7295
  def format(q); end

  # [Statements] the top-level expressions of the program
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7270
  def statements; end
end

# QSymbols represents a symbol literal array without interpolation.
#
#     %i[one two three]
#
# source://syntax_tree//lib/syntax_tree/node.rb#7310
class SyntaxTree::QSymbols < ::SyntaxTree::Node
  # @return [QSymbols] a new instance of QSymbols
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7319
  def initialize(beginning:, elements:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7326
  def accept(visitor); end

  # [QSymbolsBeg] the token that opens this array literal
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7311
  def beginning; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7330
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7317
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7330
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7336
  def deconstruct_keys(_keys); end

  # [Array[ TStringContent ]] the elements of the array
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7314
  def elements; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7345
  def format(q); end
end

# QSymbolsBeg represents the beginning of a symbol literal array.
#
#     %i[one two three]
#
# In the snippet above, QSymbolsBeg represents the "%i[" token. Note that
# these kinds of arrays can start with a lot of different delimiter types
# (e.g., %i| or %i<).
#
# source://syntax_tree//lib/syntax_tree/node.rb#7376
class SyntaxTree::QSymbolsBeg < ::SyntaxTree::Node
  # @return [QSymbolsBeg] a new instance of QSymbolsBeg
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7379
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7384
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7388
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7388
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7394
  def deconstruct_keys(_keys); end

  # [String] the beginning of the array literal
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7377
  def value; end
end

# QWords represents a string literal array without interpolation.
#
#     %w[one two three]
#
# source://syntax_tree//lib/syntax_tree/node.rb#7404
class SyntaxTree::QWords < ::SyntaxTree::Node
  # @return [QWords] a new instance of QWords
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7413
  def initialize(beginning:, elements:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7420
  def accept(visitor); end

  # [QWordsBeg] the token that opens this array literal
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7405
  def beginning; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7424
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7411
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7424
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7430
  def deconstruct_keys(_keys); end

  # [Array[ TStringContent ]] the elements of the array
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7408
  def elements; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7439
  def format(q); end
end

# QWordsBeg represents the beginning of a string literal array.
#
#     %w[one two three]
#
# In the snippet above, QWordsBeg represents the "%w[" token. Note that these
# kinds of arrays can start with a lot of different delimiter types (e.g.,
# %w| or %w<).
#
# source://syntax_tree//lib/syntax_tree/node.rb#7470
class SyntaxTree::QWordsBeg < ::SyntaxTree::Node
  # @return [QWordsBeg] a new instance of QWordsBeg
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7473
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7478
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7482
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7482
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7488
  def deconstruct_keys(_keys); end

  # [String] the beginning of the array literal
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7471
  def value; end
end

# Responsible for providing information about quotes to be used for strings
# and dynamic symbols.
#
# source://syntax_tree//lib/syntax_tree/node.rb#3994
module SyntaxTree::Quotes
  class << self
    # If there is some part of this string that matches an escape sequence or
    # that contains the interpolation pattern ("#{"), then we are locked into
    # whichever quote the user chose. (If they chose single quotes, then double
    # quoting would activate the escape sequence, and if they chose double
    # quotes, then single quotes would deactivate it.)
    #
    # @return [Boolean]
    #
    # source://syntax_tree//lib/syntax_tree/node.rb#4003
    def locked?(node, quote); end

    # Find the matching closing quote for the given opening quote.
    #
    # source://syntax_tree//lib/syntax_tree/node.rb#4010
    def matching(quote); end

    # Escape and unescape single and double quotes as needed to be able to
    # enclose +content+ with +enclosing+.
    #
    # source://syntax_tree//lib/syntax_tree/node.rb#4016
    def normalize(content, enclosing); end
  end
end

# The matching pairs of quotes that can be used with % literals.
#
# source://syntax_tree//lib/syntax_tree/node.rb#3996
SyntaxTree::Quotes::PAIRS = T.let(T.unsafe(nil), Hash)

# RAssign represents a single-line pattern match.
#
#     value in pattern
#     value => pattern
#
# source://syntax_tree//lib/syntax_tree/node.rb#2837
class SyntaxTree::RAssign < ::SyntaxTree::Node
  # @return [RAssign] a new instance of RAssign
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2850
  def initialize(value:, operator:, pattern:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2858
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2862
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2848
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2862
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#2868
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#2878
  def format(q); end

  # [Kw | Op] the operator being used to match against the pattern, which is
  # either => or in
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2842
  def operator; end

  # [untyped] the pattern on the right-hand side of the expression
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2845
  def pattern; end

  # [untyped] the left-hand expression
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#2838
  def value; end
end

# RBrace represents the use of a right brace, i.e., +++.
#
# source://syntax_tree//lib/syntax_tree/node.rb#7531
class SyntaxTree::RBrace < ::SyntaxTree::Node
  # @return [RBrace] a new instance of RBrace
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7534
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7539
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7543
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7543
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7549
  def deconstruct_keys(_keys); end

  # [String] the right brace
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7532
  def value; end
end

# RBracket represents the use of a right bracket, i.e., +]+.
#
# source://syntax_tree//lib/syntax_tree/node.rb#7556
class SyntaxTree::RBracket < ::SyntaxTree::Node
  # @return [RBracket] a new instance of RBracket
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7559
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7564
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7568
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7568
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7574
  def deconstruct_keys(_keys); end

  # [String] the right bracket
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7557
  def value; end
end

# RParen represents the use of a right parenthesis, i.e., +)+.
#
# source://syntax_tree//lib/syntax_tree/node.rb#8200
class SyntaxTree::RParen < ::SyntaxTree::Node
  # @return [RParen] a new instance of RParen
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8203
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8208
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8212
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8212
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8218
  def deconstruct_keys(_keys); end

  # [String] the parenthesis
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8201
  def value; end
end

# RationalLiteral represents the use of a rational number literal.
#
#     1r
#
# source://syntax_tree//lib/syntax_tree/node.rb#7498
class SyntaxTree::RationalLiteral < ::SyntaxTree::Node
  # @return [RationalLiteral] a new instance of RationalLiteral
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7504
  def initialize(value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7510
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7514
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7502
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7514
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7520
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7524
  def format(q); end

  # [String] the rational number literal
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7499
  def value; end
end

# Redo represents the use of the +redo+ keyword.
#
#     redo
#
# source://syntax_tree//lib/syntax_tree/node.rb#7584
class SyntaxTree::Redo < ::SyntaxTree::Node
  # @return [Redo] a new instance of Redo
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7590
  def initialize(value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7596
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7600
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7588
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7600
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7606
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7610
  def format(q); end

  # [String] the value of the keyword
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7585
  def value; end
end

# RegexpBeg represents the start of a regular expression literal.
#
#     /.+/
#
# In the example above, RegexpBeg represents the first / token. Regular
# expression literals can also be declared using the %r syntax, as in:
#
#     %r{.+}
#
# source://syntax_tree//lib/syntax_tree/node.rb#7660
class SyntaxTree::RegexpBeg < ::SyntaxTree::Node
  # @return [RegexpBeg] a new instance of RegexpBeg
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7663
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7668
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7672
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7672
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7678
  def deconstruct_keys(_keys); end

  # [String] the beginning of the regular expression
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7661
  def value; end
end

# RegexpContent represents the body of a regular expression.
#
#     /.+ #{pattern} .+/
#
# In the example above, a RegexpContent node represents everything contained
# within the forward slashes.
#
# source://syntax_tree//lib/syntax_tree/node.rb#7622
class SyntaxTree::RegexpContent < ::SyntaxTree::Node
  # @return [RegexpContent] a new instance of RegexpContent
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7629
  def initialize(beginning:, parts:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7635
  def accept(visitor); end

  # [String] the opening of the regular expression
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7623
  def beginning; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7639
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7639
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7645
  def deconstruct_keys(_keys); end

  # [Array[ StringDVar | StringEmbExpr | TStringContent ]] the parts of the
  # regular expression
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7627
  def parts; end
end

# RegexpEnd represents the end of a regular expression literal.
#
#     /.+/m
#
# In the example above, the RegexpEnd event represents the /m at the end of
# the regular expression literal. You can also declare regular expression
# literals using %r, as in:
#
#     %r{.+}m
#
# source://syntax_tree//lib/syntax_tree/node.rb#7694
class SyntaxTree::RegexpEnd < ::SyntaxTree::Node
  # @return [RegexpEnd] a new instance of RegexpEnd
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7697
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7702
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7706
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7706
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7712
  def deconstruct_keys(_keys); end

  # [String] the end of the regular expression
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7695
  def value; end
end

# RegexpLiteral represents a regular expression literal.
#
#     /.+/
#
# source://syntax_tree//lib/syntax_tree/node.rb#7722
class SyntaxTree::RegexpLiteral < ::SyntaxTree::Node
  # @return [RegexpLiteral] a new instance of RegexpLiteral
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7735
  def initialize(beginning:, ending:, parts:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7743
  def accept(visitor); end

  # [String] the beginning of the regular expression literal
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7723
  def beginning; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7747
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7733
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7747
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7753
  def deconstruct_keys(_keys); end

  # [String] the ending of the regular expression literal
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7726
  def ending; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7764
  def format(q); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7804
  def options; end

  # [Array[ StringEmbExpr | StringDVar | TStringContent ]] the parts of the
  # regular expression literal
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7730
  def parts; end

  private

  # If the first part of this regex is plain string content, we have a space
  # or an =, and we're contained within a command or command_call node, then
  # we want to use braces because otherwise we could end up with an ambiguous
  # operator, e.g. foo / bar/ or foo /=bar/
  #
  # @return [Boolean]
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7820
  def ambiguous?(q); end

  # @return [Boolean]
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7810
  def include?(pattern); end
end

# Rescue represents the use of the rescue keyword inside of a BodyStmt node.
#
#     begin
#     rescue
#     end
#
# source://syntax_tree//lib/syntax_tree/node.rb#7894
class SyntaxTree::Rescue < ::SyntaxTree::Node
  # @return [Rescue] a new instance of Rescue
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7909
  def initialize(keyword:, exception:, statements:, consequent:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7947
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7925
  def bind_end(end_char, end_column); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7951
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7907
  def comments; end

  # [nil | Rescue] the optional next clause in the chain
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7904
  def consequent; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7951
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7957
  def deconstruct_keys(_keys); end

  # [RescueEx] the exceptions being rescued
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7898
  def exception; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7968
  def format(q); end

  # [Kw] the rescue keyword
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7895
  def keyword; end

  # [Statements] the expressions to evaluate when an error is rescued
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7901
  def statements; end
end

# RescueEx represents the list of exceptions being rescued in a rescue clause.
#
#     begin
#     rescue Exception => exception
#     end
#
# source://syntax_tree//lib/syntax_tree/node.rb#7836
class SyntaxTree::RescueEx < ::SyntaxTree::Node
  # @return [RescueEx] a new instance of RescueEx
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7846
  def initialize(exceptions:, variable:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7853
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#7857
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7844
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7857
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7863
  def deconstruct_keys(_keys); end

  # [untyped] the list of exceptions being rescued
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7837
  def exceptions; end

  # source://syntax_tree//lib/syntax_tree/node.rb#7872
  def format(q); end

  # [nil | Field | VarField] the expression being used to capture the raised
  # exception
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7841
  def variable; end
end

# RescueMod represents the use of the modifier form of a +rescue+ clause.
#
#     expression rescue value
#
# source://syntax_tree//lib/syntax_tree/node.rb#7998
class SyntaxTree::RescueMod < ::SyntaxTree::Node
  # @return [RescueMod] a new instance of RescueMod
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8007
  def initialize(statement:, value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8014
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8018
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8005
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8018
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8024
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8033
  def format(q); end

  # [untyped] the expression to execute
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#7999
  def statement; end

  # [untyped] the value to use if the executed expression raises an error
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8002
  def value; end
end

# RestParam represents defining a parameter in a method definition that
# accepts all remaining positional parameters.
#
#     def method(*rest) end
#
# source://syntax_tree//lib/syntax_tree/node.rb#8058
class SyntaxTree::RestParam < ::SyntaxTree::Node
  # @return [RestParam] a new instance of RestParam
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8064
  def initialize(name:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8070
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8074
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8062
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8074
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8080
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8084
  def format(q); end

  # [nil | Ident] the name of the parameter
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8059
  def name; end
end

# Retry represents the use of the +retry+ keyword.
#
#     retry
#
# source://syntax_tree//lib/syntax_tree/node.rb#8095
class SyntaxTree::Retry < ::SyntaxTree::Node
  # @return [Retry] a new instance of Retry
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8101
  def initialize(value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8107
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8111
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8099
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8111
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8117
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8121
  def format(q); end

  # [String] the value of the keyword
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8096
  def value; end
end

# Return represents using the +return+ keyword with arguments.
#
#     return value
#
# source://syntax_tree//lib/syntax_tree/node.rb#8131
class SyntaxTree::Return < ::SyntaxTree::Node
  # @return [Return] a new instance of Return
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8137
  def initialize(arguments:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8143
  def accept(visitor); end

  # [Args] the arguments being passed to the keyword
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8132
  def arguments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8147
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8135
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8147
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8153
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8157
  def format(q); end
end

# Return0 represents the bare +return+ keyword with no arguments.
#
#     return
#
# source://syntax_tree//lib/syntax_tree/node.rb#8167
class SyntaxTree::Return0 < ::SyntaxTree::Node
  # @return [Return0] a new instance of Return0
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8173
  def initialize(value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8179
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8183
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8171
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8183
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8189
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8193
  def format(q); end

  # [String] the value of the keyword
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8168
  def value; end
end

# SClass represents a block of statements that should be evaluated within the
# context of the singleton class of an object. It's frequently used to define
# singleton methods.
#
#     class << self
#     end
#
# source://syntax_tree//lib/syntax_tree/node.rb#8231
class SyntaxTree::SClass < ::SyntaxTree::Node
  # @return [SClass] a new instance of SClass
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8240
  def initialize(target:, bodystmt:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8247
  def accept(visitor); end

  # [BodyStmt] the expressions to be executed
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8235
  def bodystmt; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8251
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8238
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8251
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8257
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8266
  def format(q); end

  # [untyped] the target of the singleton class to enter
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8232
  def target; end
end

# Everything that has a block of code inside of it has a list of statements.
# Normally we would just track those as a node that has an array body, but we
# have some special handling in order to handle empty statement lists. They
# need to have the right location information, so all of the parent node of
# stmts nodes will report back down the location information. We then
# propagate that onto void_stmt nodes inside the stmts in order to make sure
# all comments get printed appropriately.
#
# source://syntax_tree//lib/syntax_tree/node.rb#8288
class SyntaxTree::Statements < ::SyntaxTree::Node
  # @return [Statements] a new instance of Statements
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8297
  def initialize(parser, body:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8351
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8304
  def bind(start_char, start_column, end_char, end_column); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8333
  def bind_end(end_char, end_column); end

  # [Array[ untyped ]] the list of expressions contained within this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8292
  def body; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8355
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8295
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8355
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8361
  def deconstruct_keys(_keys); end

  # @return [Boolean]
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8345
  def empty?; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8365
  def format(q); end

  # [SyntaxTree] the parser that is generating this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8289
  def parser; end

  private

  # As efficiently as possible, gather up all of the comments that have been
  # found while this statements list was being parsed and add them into the
  # body.
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8418
  def attach_comments(start_char, end_char); end
end

# StringConcat represents concatenating two strings together using a backward
# slash.
#
#     "first" \
#       "second"
#
# source://syntax_tree//lib/syntax_tree/node.rb#8492
class SyntaxTree::StringConcat < ::SyntaxTree::Node
  # @return [StringConcat] a new instance of StringConcat
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8501
  def initialize(left:, right:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8508
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8512
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8499
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8512
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8518
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8522
  def format(q); end

  # [StringConcat | StringLiteral] the left side of the concatenation
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8493
  def left; end

  # [StringLiteral] the right side of the concatenation
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8496
  def right; end
end

# StringContent represents the contents of a string-like value.
#
#     "string"
#
# source://syntax_tree//lib/syntax_tree/node.rb#8462
class SyntaxTree::StringContent < ::SyntaxTree::Node
  # @return [StringContent] a new instance of StringContent
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8465
  def initialize(parts:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8470
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8474
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8474
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8480
  def deconstruct_keys(_keys); end

  # [Array[ StringEmbExpr | StringDVar | TStringContent ]] the parts of the
  # string
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8463
  def parts; end
end

# StringDVar represents shorthand interpolation of a variable into a string.
# It allows you to take an instance variable, class variable, or global
# variable and omit the braces when interpolating.
#
#     "#@variable"
#
# source://syntax_tree//lib/syntax_tree/node.rb#8541
class SyntaxTree::StringDVar < ::SyntaxTree::Node
  # @return [StringDVar] a new instance of StringDVar
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8547
  def initialize(variable:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8553
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8557
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8545
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8557
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8563
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8567
  def format(q); end

  # [Backref | VarRef] the variable being interpolated
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8542
  def variable; end
end

# StringEmbExpr represents interpolated content. It can be contained within a
# couple of different parent nodes, including regular expressions, strings,
# and dynamic symbols.
#
#     "string #{expression}"
#
# source://syntax_tree//lib/syntax_tree/node.rb#8581
class SyntaxTree::StringEmbExpr < ::SyntaxTree::Node
  # @return [StringEmbExpr] a new instance of StringEmbExpr
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8587
  def initialize(statements:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8593
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8597
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8585
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8597
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8603
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8607
  def format(q); end

  # [Statements] the expressions to be interpolated
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8582
  def statements; end
end

# StringLiteral represents a string literal.
#
#     "string"
#
# source://syntax_tree//lib/syntax_tree/node.rb#8640
class SyntaxTree::StringLiteral < ::SyntaxTree::Node
  # @return [StringLiteral] a new instance of StringLiteral
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8649
  def initialize(parts:, quote:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8656
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8660
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8647
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8660
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8666
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8670
  def format(q); end

  # [Array[ StringEmbExpr | StringDVar | TStringContent ]] the parts of the
  # string literal
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8641
  def parts; end

  # [String] which quote was used by the string literal
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8644
  def quote; end
end

# Super represents using the +super+ keyword with arguments. It can optionally
# use parentheses.
#
#     super(value)
#
# source://syntax_tree//lib/syntax_tree/node.rb#8718
class SyntaxTree::Super < ::SyntaxTree::Node
  # @return [Super] a new instance of Super
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8724
  def initialize(arguments:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8730
  def accept(visitor); end

  # [ArgParen | Args] the arguments to the keyword
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8719
  def arguments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8734
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8722
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8734
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8740
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8744
  def format(q); end
end

# SymBeg represents the beginning of a symbol literal.
#
#     :symbol
#
# SymBeg is also used for dynamic symbols, as in:
#
#     :"symbol"
#
# Finally, SymBeg is also used for symbols using the %s syntax, as in:
#
#     %s[symbol]
#
# The value of this node is a string. In most cases (as in the first example
# above) it will contain just ":". In the case of dynamic symbols it will
# contain ":'" or ":\"". In the case of %s symbols, it will contain the start
# of the symbol including the %s and the delimiter.
#
# source://syntax_tree//lib/syntax_tree/node.rb#8775
class SyntaxTree::SymBeg < ::SyntaxTree::Node
  # @return [SymBeg] a new instance of SymBeg
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8778
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8783
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8787
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8787
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8793
  def deconstruct_keys(_keys); end

  # [String] the beginning of the symbol
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8776
  def value; end
end

# SymbolContent represents symbol contents and is always the child of a
# SymbolLiteral node.
#
#     :symbol
#
# source://syntax_tree//lib/syntax_tree/node.rb#8805
class SyntaxTree::SymbolContent < ::SyntaxTree::Node
  # @return [SymbolContent] a new instance of SymbolContent
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8808
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8813
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8817
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8817
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8823
  def deconstruct_keys(_keys); end

  # [Backtick | Const | CVar | GVar | Ident | IVar | Kw | Op] the value of the
  # symbol
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8806
  def value; end
end

# SymbolLiteral represents a symbol in the system with no interpolation
# (as opposed to a DynaSymbol which has interpolation).
#
#     :symbol
#
# source://syntax_tree//lib/syntax_tree/node.rb#8835
class SyntaxTree::SymbolLiteral < ::SyntaxTree::Node
  # @return [SymbolLiteral] a new instance of SymbolLiteral
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8841
  def initialize(value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8847
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8851
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8839
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8851
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8857
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8861
  def format(q); end

  # [Backtick | Const | CVar | GVar | Ident | IVar | Kw | Op] the value of the
  # symbol
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8836
  def value; end
end

# Symbols represents a symbol array literal with interpolation.
#
#     %I[one two three]
#
# source://syntax_tree//lib/syntax_tree/node.rb#8872
class SyntaxTree::Symbols < ::SyntaxTree::Node
  # @return [Symbols] a new instance of Symbols
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8881
  def initialize(beginning:, elements:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8888
  def accept(visitor); end

  # [SymbolsBeg] the token that opens this array literal
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8873
  def beginning; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8892
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8879
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8892
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8898
  def deconstruct_keys(_keys); end

  # [Array[ Word ]] the words in the symbol array literal
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8876
  def elements; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8907
  def format(q); end
end

# SymbolsBeg represents the start of a symbol array literal with
# interpolation.
#
#     %I[one two three]
#
# In the snippet above, SymbolsBeg represents the "%I[" token. Note that these
# kinds of arrays can start with a lot of different delimiter types
# (e.g., %I| or %I<).
#
# source://syntax_tree//lib/syntax_tree/node.rb#8939
class SyntaxTree::SymbolsBeg < ::SyntaxTree::Node
  # @return [SymbolsBeg] a new instance of SymbolsBeg
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8942
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8947
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8951
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8951
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8957
  def deconstruct_keys(_keys); end

  # [String] the beginning of the symbol literal array
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8940
  def value; end
end

# TLamBeg represents the beginning of the body of a lambda literal using
# braces.
#
#     -> { value }
#
# In the example above the TLamBeg represents the +{+ operator.
#
# source://syntax_tree//lib/syntax_tree/node.rb#8998
class SyntaxTree::TLamBeg < ::SyntaxTree::Node
  # @return [TLamBeg] a new instance of TLamBeg
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9001
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9006
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9010
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9010
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9016
  def deconstruct_keys(_keys); end

  # [String] the beginning of the body of the lambda literal
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8999
  def value; end
end

# TLambda represents the beginning of a lambda literal.
#
#     -> { value }
#
# In the example above the TLambda represents the +->+ operator.
#
# source://syntax_tree//lib/syntax_tree/node.rb#8968
class SyntaxTree::TLambda < ::SyntaxTree::Node
  # @return [TLambda] a new instance of TLambda
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8971
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8976
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#8980
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8980
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#8986
  def deconstruct_keys(_keys); end

  # [String] the beginning of the lambda literal
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#8969
  def value; end
end

# TStringBeg represents the beginning of a string literal.
#
#     "string"
#
# In the example above, TStringBeg represents the first set of quotes. Strings
# can also use single quotes. They can also be declared using the +%q+ and
# +%Q+ syntax, as in:
#
#     %q{string}
#
# source://syntax_tree//lib/syntax_tree/node.rb#9109
class SyntaxTree::TStringBeg < ::SyntaxTree::Node
  # @return [TStringBeg] a new instance of TStringBeg
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9112
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9117
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9121
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9121
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9127
  def deconstruct_keys(_keys); end

  # [String] the beginning of the string
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9110
  def value; end
end

# TStringContent represents plain characters inside of an entity that accepts
# string content like a string, heredoc, command string, or regular
# expression.
#
#     "string"
#
# In the example above, TStringContent represents the +string+ token contained
# within the string.
#
# source://syntax_tree//lib/syntax_tree/node.rb#9141
class SyntaxTree::TStringContent < ::SyntaxTree::Node
  # @return [TStringContent] a new instance of TStringContent
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9147
  def initialize(value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9157
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9161
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9145
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9161
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9167
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9171
  def format(q); end

  # @return [Boolean]
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9153
  def match?(pattern); end

  # [String] the content of the string
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9142
  def value; end
end

# TStringEnd represents the end of a string literal.
#
#     "string"
#
# In the example above, TStringEnd represents the second set of quotes.
# Strings can also use single quotes. They can also be declared using the +%q+
# and +%Q+ syntax, as in:
#
#     %q{string}
#
# source://syntax_tree//lib/syntax_tree/node.rb#9187
class SyntaxTree::TStringEnd < ::SyntaxTree::Node
  # @return [TStringEnd] a new instance of TStringEnd
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9190
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9195
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9199
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9199
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9205
  def deconstruct_keys(_keys); end

  # [String] the end of the string
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9188
  def value; end
end

# In order for an `if` or `unless` expression to be shortened to a ternary,
# there has to be one and only one consequent clause which is an Else. Both
# the body of the main node and the body of the Else node must have only one
# statement, and that statement must not be on the denied list of potential
# statements.
#
# source://syntax_tree//lib/syntax_tree/node.rb#5359
module SyntaxTree::Ternaryable
  class << self
    # source://syntax_tree//lib/syntax_tree/node.rb#5361
    def call(q, node); end

    private

    # Certain expressions cannot be reduced to a ternary without adding
    # parentheses around them. In this case we say they cannot be ternaried
    # and default instead to breaking them into multiple lines.
    #
    # @return [Boolean]
    #
    # source://syntax_tree//lib/syntax_tree/node.rb#5399
    def ternaryable?(statement); end
  end
end

# TopConstField is always the child node of some kind of assignment. It
# represents when you're assigning to a constant that is being referenced at
# the top level.
#
#     ::Constant = value
#
# source://syntax_tree//lib/syntax_tree/node.rb#9028
class SyntaxTree::TopConstField < ::SyntaxTree::Node
  # @return [TopConstField] a new instance of TopConstField
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9034
  def initialize(constant:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9040
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9044
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9032
  def comments; end

  # [Const] the constant being assigned
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9029
  def constant; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9044
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9050
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9054
  def format(q); end
end

# TopConstRef is very similar to TopConstField except that it is not involved
# in an assignment.
#
#     ::Constant
#
# source://syntax_tree//lib/syntax_tree/node.rb#9066
class SyntaxTree::TopConstRef < ::SyntaxTree::Node
  # @return [TopConstRef] a new instance of TopConstRef
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9072
  def initialize(constant:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9078
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9082
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9070
  def comments; end

  # [Const] the constant being referenced
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9067
  def constant; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9082
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9088
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9092
  def format(q); end
end

# Unary represents a unary method being called on an expression, as in +!+ or
# +~+.
#
#     !value
#
# source://syntax_tree//lib/syntax_tree/node.rb#9282
class SyntaxTree::Unary < ::SyntaxTree::Node
  # @return [Unary] a new instance of Unary
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9291
  def initialize(operator:, statement:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9298
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9302
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9289
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9302
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9308
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9317
  def format(q); end

  # [String] the operator being used
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9283
  def operator; end

  # [untyped] the statement on which to operate
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9286
  def statement; end
end

# Undef represents the use of the +undef+ keyword.
#
#     undef method
#
# source://syntax_tree//lib/syntax_tree/node.rb#9330
class SyntaxTree::Undef < ::SyntaxTree::Node
  # @return [Undef] a new instance of Undef
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9358
  def initialize(symbols:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9364
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9368
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9356
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9368
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9374
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9378
  def format(q); end

  # [Array[ DynaSymbol | SymbolLiteral ]] the symbols to undefine
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9353
  def symbols; end
end

# Undef accepts a variable number of arguments that can be either DynaSymbol
# or SymbolLiteral objects. For SymbolLiteral objects we descend directly
# into the value in order to have it come out as bare words.
#
# source://syntax_tree//lib/syntax_tree/node.rb#9331
class SyntaxTree::Undef::UndefArgumentFormatter
  # @return [UndefArgumentFormatter] a new instance of UndefArgumentFormatter
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9335
  def initialize(node); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9339
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9347
  def format(q); end

  # [DynaSymbol | SymbolLiteral] the symbol to undefine
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9333
  def node; end
end

# Unless represents the first clause in an +unless+ chain.
#
#     unless predicate
#     end
#
# source://syntax_tree//lib/syntax_tree/node.rb#9397
class SyntaxTree::Unless < ::SyntaxTree::Node
  # @return [Unless] a new instance of Unless
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9409
  def initialize(predicate:, statements:, consequent:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9423
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9427
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9407
  def comments; end

  # [nil, Elsif, Else] the next clause in the chain
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9404
  def consequent; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9427
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9433
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9443
  def format(q); end

  # [untyped] the expression to be checked
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9398
  def predicate; end

  # [Statements] the expressions to be executed
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9401
  def statements; end
end

# UnlessMod represents the modifier form of an +unless+ statement.
#
#     expression unless predicate
#
# source://syntax_tree//lib/syntax_tree/node.rb#9453
class SyntaxTree::UnlessMod < ::SyntaxTree::Node
  # @return [UnlessMod] a new instance of UnlessMod
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9462
  def initialize(statement:, predicate:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9469
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9473
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9460
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9473
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9479
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9488
  def format(q); end

  # [untyped] the expression to be checked
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9457
  def predicate; end

  # [untyped] the expression to be executed
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9454
  def statement; end
end

# Until represents an +until+ loop.
#
#     until predicate
#     end
#
# source://syntax_tree//lib/syntax_tree/node.rb#9550
class SyntaxTree::Until < ::SyntaxTree::Node
  # @return [Until] a new instance of Until
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9559
  def initialize(predicate:, statements:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9566
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9570
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9557
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9570
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9576
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9585
  def format(q); end

  # [untyped] the expression to be checked
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9551
  def predicate; end

  # [Statements] the expressions to be executed
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9554
  def statements; end
end

# UntilMod represents the modifier form of a +until+ loop.
#
#     expression until predicate
#
# source://syntax_tree//lib/syntax_tree/node.rb#9606
class SyntaxTree::UntilMod < ::SyntaxTree::Node
  # @return [UntilMod] a new instance of UntilMod
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9615
  def initialize(statement:, predicate:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9622
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9626
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9613
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9626
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9632
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9641
  def format(q); end

  # [untyped] the expression to be checked
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9610
  def predicate; end

  # [untyped] the expression to be executed
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9607
  def statement; end
end

# VCall represent any plain named object with Ruby that could be either a
# local variable or a method call.
#
#     variable
#
# source://syntax_tree//lib/syntax_tree/node.rb#9867
class SyntaxTree::VCall < ::SyntaxTree::Node
  # @return [VCall] a new instance of VCall
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9873
  def initialize(value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9879
  def accept(visitor); end

  # @return [Boolean]
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9897
  def access_control?; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9883
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9871
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9883
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9889
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9893
  def format(q); end

  # [Ident] the value of this expression
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9868
  def value; end
end

# source://syntax_tree//lib/syntax_tree/version.rb#4
SyntaxTree::VERSION = T.let(T.unsafe(nil), String)

# VarAlias represents when you're using the +alias+ keyword with global
# variable arguments.
#
#     alias $new $old
#
# source://syntax_tree//lib/syntax_tree/node.rb#9672
class SyntaxTree::VarAlias < ::SyntaxTree::Node
  # @return [VarAlias] a new instance of VarAlias
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9681
  def initialize(left:, right:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9688
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9692
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9679
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9692
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9698
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9702
  def format(q); end

  # [GVar] the new alias of the variable
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9673
  def left; end

  # [Backref | GVar] the current name of the variable to be aliased
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9676
  def right; end
end

# VarField represents a variable that is being assigned a value. As such, it
# is always a child of an assignment type node.
#
#     variable = value
#
# In the example above, the VarField node represents the +variable+ token.
#
# source://syntax_tree//lib/syntax_tree/node.rb#9719
class SyntaxTree::VarField < ::SyntaxTree::Node
  # @return [VarField] a new instance of VarField
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9725
  def initialize(value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9731
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9735
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9723
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9735
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9741
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9745
  def format(q); end

  # [nil | Const | CVar | GVar | Ident | IVar] the target of this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9720
  def value; end
end

# VarRef represents a variable reference.
#
#     true
#
# This can be a plain local variable like the example above. It can also be a
# constant, a class variable, a global variable, an instance variable, a
# keyword (like +self+, +nil+, +true+, or +false+), or a numbered block
# variable.
#
# source://syntax_tree//lib/syntax_tree/node.rb#9763
class SyntaxTree::VarRef < ::SyntaxTree::Node
  # @return [VarRef] a new instance of VarRef
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9769
  def initialize(value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9775
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9779
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9767
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9779
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9785
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9789
  def format(q); end

  # Oh man I hate this so much. Basically, ripper doesn't provide enough
  # functionality to actually know where pins are within an expression. So we
  # have to walk the tree ourselves and insert more information. In doing so,
  # we have to replace this node by a pinned node when necessary.
  #
  # To be clear, this method should just not exist. It's not good. It's a
  # place of shame. But it's necessary for now, so I'm keeping it.
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9800
  def pin(parent); end

  # [Const | CVar | GVar | Ident | IVar | Kw] the value of this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9764
  def value; end
end

# Visitor is a parent class that provides the ability to walk down the tree
# and handle a subset of nodes. By defining your own subclass, you can
# explicitly handle a node type by defining a visit_* method.
#
# source://syntax_tree//lib/syntax_tree/visitor.rb#8
class SyntaxTree::Visitor < ::SyntaxTree::BasicVisitor
  # Visit a BEGINBlock node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_BEGIN(node); end

  # Visit a CHAR node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_CHAR(node); end

  # Visit an ENDBlock node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_END(node); end

  # Visit an EndContent node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit___end__(node); end

  # Visit an Alias node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_alias(node); end

  # Visit an ARef node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_aref(node); end

  # Visit an ARefField node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_aref_field(node); end

  # Visit an ArgBlock node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_arg_block(node); end

  # Visit an ArgParen node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_arg_paren(node); end

  # Visit an ArgStar node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_arg_star(node); end

  # Visit an Args node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_args(node); end

  # Visit an ArgsForward node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_args_forward(node); end

  # Visit an ArrayLiteral node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_array(node); end

  # Visit an AryPtn node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_aryptn(node); end

  # Visit an Assign node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_assign(node); end

  # Visit an Assoc node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_assoc(node); end

  # Visit an AssocSplat node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_assoc_splat(node); end

  # Visit a Backref node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_backref(node); end

  # Visit a Backtick node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_backtick(node); end

  # Visit a BareAssocHash node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_bare_assoc_hash(node); end

  # Visit a Begin node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_begin(node); end

  # Visit a Binary node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_binary(node); end

  # Visit a BlockVar node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_block_var(node); end

  # Visit a BlockArg node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_blockarg(node); end

  # Visit a BodyStmt node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_bodystmt(node); end

  # Visit a BraceBlock node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_brace_block(node); end

  # Visit a Break node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_break(node); end

  # Visit a Call node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_call(node); end

  # Visit a Case node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_case(node); end

  # Visit a ClassDeclaration node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_class(node); end

  # Visit a Comma node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_comma(node); end

  # Visit a Command node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_command(node); end

  # Visit a CommandCall node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_command_call(node); end

  # Visit a Comment node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_comment(node); end

  # Visit a Const node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_const(node); end

  # Visit a ConstPathField node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_const_path_field(node); end

  # Visit a ConstPathRef node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_const_path_ref(node); end

  # Visit a ConstRef node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_const_ref(node); end

  # Visit a CVar node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_cvar(node); end

  # Visit a Def node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_def(node); end

  # Visit a DefEndless node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_def_endless(node); end

  # Visit a Defined node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_defined(node); end

  # Visit a Defs node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_defs(node); end

  # Visit a DoBlock node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_do_block(node); end

  # Visit a Dot2 node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_dot2(node); end

  # Visit a Dot3 node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_dot3(node); end

  # Visit a DynaSymbol node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_dyna_symbol(node); end

  # Visit an Else node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_else(node); end

  # Visit an Elsif node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_elsif(node); end

  # Visit an EmbDoc node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_embdoc(node); end

  # Visit an EmbExprBeg node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_embexpr_beg(node); end

  # Visit an EmbExprEnd node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_embexpr_end(node); end

  # Visit an EmbVar node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_embvar(node); end

  # Visit an Ensure node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_ensure(node); end

  # Visit an ExcessedComma node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_excessed_comma(node); end

  # Visit a FCall node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_fcall(node); end

  # Visit a Field node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_field(node); end

  # Visit a FloatLiteral node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_float(node); end

  # Visit a FndPtn node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_fndptn(node); end

  # Visit a For node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_for(node); end

  # Visit a GVar node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_gvar(node); end

  # Visit a HashLiteral node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_hash(node); end

  # Visit a Heredoc node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_heredoc(node); end

  # Visit a HeredocBeg node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_heredoc_beg(node); end

  # Visit a HeredocEnd node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_heredoc_end(node); end

  # Visit a HshPtn node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_hshptn(node); end

  # Visit an Ident node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_ident(node); end

  # Visit an If node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_if(node); end

  # Visit an IfMod node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_if_mod(node); end

  # Visit an IfOp node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_if_op(node); end

  # Visit an Imaginary node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_imaginary(node); end

  # Visit an In node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_in(node); end

  # Visit an Int node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_int(node); end

  # Visit an IVar node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_ivar(node); end

  # Visit a Kw node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_kw(node); end

  # Visit a KwRestParam node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_kwrest_param(node); end

  # Visit a Label node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_label(node); end

  # Visit a LabelEnd node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_label_end(node); end

  # Visit a Lambda node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_lambda(node); end

  # Visit a LambdaVar node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_lambda_var(node); end

  # Visit a LBrace node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_lbrace(node); end

  # Visit a LBracket node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_lbracket(node); end

  # Visit a LParen node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_lparen(node); end

  # Visit a MAssign node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_massign(node); end

  # Visit a MethodAddBlock node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_method_add_block(node); end

  # Visit a MLHS node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_mlhs(node); end

  # Visit a MLHSParen node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_mlhs_paren(node); end

  # Visit a ModuleDeclaration node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_module(node); end

  # Visit a MRHS node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_mrhs(node); end

  # Visit a Next node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_next(node); end

  # Visit a Not node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_not(node); end

  # Visit an Op node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_op(node); end

  # Visit an OpAssign node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_opassign(node); end

  # Visit a Params node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_params(node); end

  # Visit a Paren node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_paren(node); end

  # Visit a Period node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_period(node); end

  # Visit a PinnedBegin node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_pinned_begin(node); end

  # Visit a PinnedVarRef node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_pinned_var_ref(node); end

  # Visit a Program node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_program(node); end

  # Visit a QSymbols node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_qsymbols(node); end

  # Visit a QSymbolsBeg node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_qsymbols_beg(node); end

  # Visit a QWords node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_qwords(node); end

  # Visit a QWordsBeg node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_qwords_beg(node); end

  # Visit a RAssign node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_rassign(node); end

  # Visit a RationalLiteral node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_rational(node); end

  # Visit a RBrace node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_rbrace(node); end

  # Visit a RBracket node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_rbracket(node); end

  # Visit a Redo node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_redo(node); end

  # Visit a RegexpBeg node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_regexp_beg(node); end

  # Visit a RegexpContent node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_regexp_content(node); end

  # Visit a RegexpEnd node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_regexp_end(node); end

  # Visit a RegexpLiteral node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_regexp_literal(node); end

  # Visit a Rescue node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_rescue(node); end

  # Visit a RescueEx node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_rescue_ex(node); end

  # Visit a RescueMod node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_rescue_mod(node); end

  # Visit a RestParam node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_rest_param(node); end

  # Visit a Retry node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_retry(node); end

  # Visit a Return node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_return(node); end

  # Visit a Return0 node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_return0(node); end

  # Visit a RParen node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_rparen(node); end

  # Visit a SClass node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_sclass(node); end

  # Visit a Statements node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_statements(node); end

  # Visit a StringConcat node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_string_concat(node); end

  # Visit a StringContent node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_string_content(node); end

  # Visit a StringDVar node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_string_dvar(node); end

  # Visit a StringEmbExpr node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_string_embexpr(node); end

  # Visit a StringLiteral node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_string_literal(node); end

  # Visit a Super node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_super(node); end

  # Visit a SymBeg node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_symbeg(node); end

  # Visit a SymbolContent node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_symbol_content(node); end

  # Visit a SymbolLiteral node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_symbol_literal(node); end

  # Visit a Symbols node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_symbols(node); end

  # Visit a SymbolsBeg node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_symbols_beg(node); end

  # Visit a TLambda node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_tlambda(node); end

  # Visit a TLamBeg node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_tlambeg(node); end

  # Visit a TopConstField node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_top_const_field(node); end

  # Visit a TopConstRef node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_top_const_ref(node); end

  # Visit a TStringBeg node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_tstring_beg(node); end

  # Visit a TStringContent node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_tstring_content(node); end

  # Visit a TStringEnd node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_tstring_end(node); end

  # Visit an Unary node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_unary(node); end

  # Visit an Undef node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_undef(node); end

  # Visit an Unless node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_unless(node); end

  # Visit an UnlessMod node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_unless_mod(node); end

  # Visit an Until node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_until(node); end

  # Visit an UntilMod node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_until_mod(node); end

  # Visit a VarAlias node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_var_alias(node); end

  # Visit a VarField node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_var_field(node); end

  # Visit a VarRef node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_var_ref(node); end

  # Visit a VCall node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_vcall(node); end

  # Visit a VoidStmt node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_void_stmt(node); end

  # Visit a When node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_when(node); end

  # Visit a While node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_while(node); end

  # Visit a WhileMod node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_while_mod(node); end

  # Visit a Word node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_word(node); end

  # Visit a Words node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_words(node); end

  # Visit a WordsBeg node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_words_beg(node); end

  # Visit a XString node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_xstring(node); end

  # Visit a XStringLiteral node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_xstring_literal(node); end

  # Visit a Yield node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_yield(node); end

  # Visit a Yield0 node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_yield0(node); end

  # Visit a ZSuper node.
  #
  # source://syntax_tree//lib/syntax_tree/basic_visitor.rb#74
  def visit_zsuper(node); end
end

# This is the parent class of a lot of built-in visitors for Syntax Tree. It
# reflects visiting each of the fields on every node in turn. It itself does
# not do anything with these fields, it leaves that behavior up to the
# subclass to implement.
#
# In order to properly use this class, you will need to subclass it and
# implement #comments, #field, #list, #node, #pairs, and #text. Those are
# documented here.
#
# == comments(node)
#
# This accepts the node that is being visited and does something depending
# on the comments attached to the node.
#
# == field(name, value)
#
# This accepts the name of the field being visited as a string (like
# "value") and the actual value of that field. The value can be a subclass
# of Node or any other type that can be held within the tree.
#
# == list(name, values)
#
# This accepts the name of the field being visited as well as a list of
# values. This is used, for example, when visiting something like the body
# of a Statements node.
#
# == node(name, node)
#
# This is the parent serialization method for each node. It is called with
# the node itself, as well as the type of the node as a string. The type
# is an internally used value that usually resembles the name of the
# ripper event that generated the node. The method should yield to the
# given block which then calls through to visit each of the fields on the
# node.
#
# == text(name, value)
#
# This accepts the name of the field being visited as well as a string
# value representing the value of the field.
#
# == pairs(name, values)
#
# This accepts the name of the field being visited as well as a list of
# pairs that represent the value of the field. It is used only in a couple
# of circumstances, like when visiting the list of optional parameters
# defined on a method.
#
# source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#52
class SyntaxTree::Visitor::FieldVisitor < ::SyntaxTree::BasicVisitor
  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#164
  def visit_BEGIN(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#246
  def visit_CHAR(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#388
  def visit_END(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#1111
  def visit___end__(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#69
  def visit_alias(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#53
  def visit_aref(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#61
  def visit_aref_field(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#77
  def visit_arg_block(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#84
  def visit_arg_paren(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#91
  def visit_arg_star(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#98
  def visit_args(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#105
  def visit_args_forward(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#109
  def visit_array(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#116
  def visit_aryptn(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#126
  def visit_assign(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#134
  def visit_assoc(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#142
  def visit_assoc_splat(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#149
  def visit_backref(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#153
  def visit_backtick(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#157
  def visit_bare_assoc_hash(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#171
  def visit_begin(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#178
  def visit_binary(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#194
  def visit_block_var(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#187
  def visit_blockarg(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#202
  def visit_bodystmt(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#212
  def visit_brace_block(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#220
  def visit_break(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#227
  def visit_call(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#237
  def visit_case(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#250
  def visit_class(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#259
  def visit_comma(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#263
  def visit_command(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#271
  def visit_command_call(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#281
  def visit_comment(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#285
  def visit_const(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#289
  def visit_const_path_field(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#297
  def visit_const_path_ref(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#305
  def visit_const_ref(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#312
  def visit_cvar(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#316
  def visit_def(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#325
  def visit_def_endless(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#339
  def visit_defined(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#346
  def visit_defs(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#357
  def visit_do_block(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#365
  def visit_dot2(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#373
  def visit_dot3(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#381
  def visit_dyna_symbol(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#395
  def visit_else(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#402
  def visit_elsif(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#411
  def visit_embdoc(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#415
  def visit_embexpr_beg(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#419
  def visit_embexpr_end(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#423
  def visit_embvar(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#427
  def visit_ensure(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#434
  def visit_excessed_comma(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#438
  def visit_fcall(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#446
  def visit_field(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#455
  def visit_float(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#459
  def visit_fndptn(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#469
  def visit_for(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#478
  def visit_gvar(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#482
  def visit_hash(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#489
  def visit_heredoc(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#496
  def visit_heredoc_beg(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#500
  def visit_heredoc_end(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#504
  def visit_hshptn(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#513
  def visit_ident(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#517
  def visit_if(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#526
  def visit_if_mod(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#534
  def visit_if_op(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#543
  def visit_imaginary(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#547
  def visit_in(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#556
  def visit_int(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#560
  def visit_ivar(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#564
  def visit_kw(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#568
  def visit_kwrest_param(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#575
  def visit_label(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#579
  def visit_label_end(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#583
  def visit_lambda(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#591
  def visit_lambda_var(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#599
  def visit_lbrace(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#603
  def visit_lbracket(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#607
  def visit_lparen(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#611
  def visit_massign(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#619
  def visit_method_add_block(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#627
  def visit_mlhs(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#634
  def visit_mlhs_paren(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#641
  def visit_module(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#649
  def visit_mrhs(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#656
  def visit_next(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#663
  def visit_not(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#670
  def visit_op(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#674
  def visit_opassign(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#683
  def visit_params(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#696
  def visit_paren(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#703
  def visit_period(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#707
  def visit_pinned_begin(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#714
  def visit_pinned_var_ref(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#721
  def visit_program(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#728
  def visit_qsymbols(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#735
  def visit_qsymbols_beg(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#739
  def visit_qwords(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#746
  def visit_qwords_beg(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#750
  def visit_rassign(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#759
  def visit_rational(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#763
  def visit_rbrace(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#767
  def visit_rbracket(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#771
  def visit_redo(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#775
  def visit_regexp_beg(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#779
  def visit_regexp_content(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#783
  def visit_regexp_end(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#787
  def visit_regexp_literal(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#795
  def visit_rescue(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#804
  def visit_rescue_ex(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#812
  def visit_rescue_mod(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#820
  def visit_rest_param(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#827
  def visit_retry(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#831
  def visit_return(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#838
  def visit_return0(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#842
  def visit_rparen(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#846
  def visit_sclass(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#854
  def visit_statements(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#861
  def visit_string_concat(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#869
  def visit_string_content(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#873
  def visit_string_dvar(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#880
  def visit_string_embexpr(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#887
  def visit_string_literal(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#894
  def visit_super(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#901
  def visit_symbeg(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#905
  def visit_symbol_content(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#909
  def visit_symbol_literal(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#916
  def visit_symbols(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#923
  def visit_symbols_beg(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#927
  def visit_tlambda(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#931
  def visit_tlambeg(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#935
  def visit_top_const_field(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#942
  def visit_top_const_ref(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#949
  def visit_tstring_beg(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#953
  def visit_tstring_content(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#957
  def visit_tstring_end(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#961
  def visit_unary(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#969
  def visit_undef(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#976
  def visit_unless(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#985
  def visit_unless_mod(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#993
  def visit_until(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#1001
  def visit_until_mod(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#1009
  def visit_var_alias(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#1017
  def visit_var_field(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#1024
  def visit_var_ref(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#1031
  def visit_vcall(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#1038
  def visit_void_stmt(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#1042
  def visit_when(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#1051
  def visit_while(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#1059
  def visit_while_mod(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#1067
  def visit_word(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#1074
  def visit_words(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#1081
  def visit_words_beg(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#1085
  def visit_xstring(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#1089
  def visit_xstring_literal(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#1096
  def visit_yield(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#1103
  def visit_yield0(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#1107
  def visit_zsuper(node); end

  private

  # source://syntax_tree//lib/syntax_tree/visitor/field_visitor.rb#1117
  def visit_token(node, type); end
end

# This visitor transforms the AST into a hash that contains only primitives
# that can be easily serialized into JSON.
#
# source://syntax_tree//lib/syntax_tree/visitor/json_visitor.rb#7
class SyntaxTree::Visitor::JSONVisitor < ::SyntaxTree::Visitor::FieldVisitor
  # @return [JSONVisitor] a new instance of JSONVisitor
  #
  # source://syntax_tree//lib/syntax_tree/visitor/json_visitor.rb#10
  def initialize; end

  # Returns the value of attribute target.
  #
  # source://syntax_tree//lib/syntax_tree/visitor/json_visitor.rb#8
  def target; end

  private

  # source://syntax_tree//lib/syntax_tree/visitor/json_visitor.rb#16
  def comments(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/json_visitor.rb#20
  def field(name, value); end

  # source://syntax_tree//lib/syntax_tree/visitor/json_visitor.rb#24
  def list(name, values); end

  # source://syntax_tree//lib/syntax_tree/visitor/json_visitor.rb#28
  def node(node, type); end

  # source://syntax_tree//lib/syntax_tree/visitor/json_visitor.rb#37
  def pairs(name, values); end

  # source://syntax_tree//lib/syntax_tree/visitor/json_visitor.rb#41
  def text(name, value); end

  # source://syntax_tree//lib/syntax_tree/visitor/json_visitor.rb#45
  def visit_location(location); end
end

# This visitor transforms the AST into a Ruby pattern matching expression
# that would match correctly against the AST.
#
# source://syntax_tree//lib/syntax_tree/visitor/match_visitor.rb#7
class SyntaxTree::Visitor::MatchVisitor < ::SyntaxTree::Visitor::FieldVisitor
  # @return [MatchVisitor] a new instance of MatchVisitor
  #
  # source://syntax_tree//lib/syntax_tree/visitor/match_visitor.rb#10
  def initialize(q); end

  # Returns the value of attribute q.
  #
  # source://syntax_tree//lib/syntax_tree/visitor/match_visitor.rb#8
  def q; end

  # source://syntax_tree//lib/syntax_tree/visitor/match_visitor.rb#14
  def visit(node); end

  private

  # source://syntax_tree//lib/syntax_tree/visitor/match_visitor.rb#31
  def comments(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/match_visitor.rb#45
  def field(name, value); end

  # source://syntax_tree//lib/syntax_tree/visitor/match_visitor.rb#53
  def list(name, values); end

  # source://syntax_tree//lib/syntax_tree/visitor/match_visitor.rb#66
  def node(node, _type); end

  # source://syntax_tree//lib/syntax_tree/visitor/match_visitor.rb#87
  def pairs(name, values); end

  # source://syntax_tree//lib/syntax_tree/visitor/match_visitor.rb#113
  def text(name, value); end
end

# This visitor pretty-prints the AST into an equivalent s-expression.
#
# source://syntax_tree//lib/syntax_tree/visitor/pretty_print_visitor.rb#6
class SyntaxTree::Visitor::PrettyPrintVisitor < ::SyntaxTree::Visitor::FieldVisitor
  # @return [PrettyPrintVisitor] a new instance of PrettyPrintVisitor
  #
  # source://syntax_tree//lib/syntax_tree/visitor/pretty_print_visitor.rb#9
  def initialize(q); end

  # Returns the value of attribute q.
  #
  # source://syntax_tree//lib/syntax_tree/visitor/pretty_print_visitor.rb#7
  def q; end

  # This is here because we need to make sure the operator is cast to a
  # string before we print it out.
  #
  # source://syntax_tree//lib/syntax_tree/visitor/pretty_print_visitor.rb#15
  def visit_binary(node); end

  # This is here to make it a little nicer to look at labels since they
  # typically have their : at the end of the value.
  #
  # source://syntax_tree//lib/syntax_tree/visitor/pretty_print_visitor.rb#26
  def visit_label(node); end

  private

  # source://syntax_tree//lib/syntax_tree/visitor/pretty_print_visitor.rb#37
  def comments(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/pretty_print_visitor.rb#46
  def field(_name, value); end

  # source://syntax_tree//lib/syntax_tree/visitor/pretty_print_visitor.rb#51
  def list(_name, values); end

  # source://syntax_tree//lib/syntax_tree/visitor/pretty_print_visitor.rb#56
  def node(_node, type); end

  # source://syntax_tree//lib/syntax_tree/visitor/pretty_print_visitor.rb#63
  def pairs(_name, values); end

  # source://syntax_tree//lib/syntax_tree/visitor/pretty_print_visitor.rb#79
  def text(_name, value); end
end

# VoidStmt represents an empty lexical block of code.
#
#     ;;
#
# source://syntax_tree//lib/syntax_tree/node.rb#9907
class SyntaxTree::VoidStmt < ::SyntaxTree::Node
  # @return [VoidStmt] a new instance of VoidStmt
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9913
  def initialize(location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9918
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9922
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9911
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9922
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9928
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9932
  def format(q); end

  # [Location] the location of this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9908
  def location; end
end

# When represents a +when+ clause in a +case+ chain.
#
#     case value
#     when predicate
#     end
#
# source://syntax_tree//lib/syntax_tree/node.rb#9943
class SyntaxTree::When < ::SyntaxTree::Node
  # @return [When] a new instance of When
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9955
  def initialize(arguments:, statements:, consequent:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#9969
  def accept(visitor); end

  # [Args] the arguments to the when clause
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9944
  def arguments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9973
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9953
  def comments; end

  # [nil | Else | When] the next clause in the chain
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9950
  def consequent; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9973
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#9979
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10005
  def format(q); end

  # [Statements] the expressions to be executed
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#9947
  def statements; end
end

# We're going to keep a single instance of this separator around so we don't
# have to allocate a new one every time we format a when clause.
#
# source://syntax_tree//lib/syntax_tree/node.rb#10003
SyntaxTree::When::SEPARATOR = T.let(T.unsafe(nil), SyntaxTree::When::Separator)

# We have a special separator here for when clauses which causes them to
# fill as much of the line as possible as opposed to everything breaking
# into its own line as soon as you hit the print limit.
#
# source://syntax_tree//lib/syntax_tree/node.rb#9992
class SyntaxTree::When::Separator
  # source://syntax_tree//lib/syntax_tree/node.rb#9993
  def call(q); end
end

# While represents a +while+ loop.
#
#     while predicate
#     end
#
# source://syntax_tree//lib/syntax_tree/node.rb#10049
class SyntaxTree::While < ::SyntaxTree::Node
  # @return [While] a new instance of While
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#10058
  def initialize(predicate:, statements:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10065
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10069
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#10056
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10069
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10075
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10084
  def format(q); end

  # [untyped] the expression to be checked
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#10050
  def predicate; end

  # [Statements] the expressions to be executed
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#10053
  def statements; end
end

# WhileMod represents the modifier form of a +while+ loop.
#
#     expression while predicate
#
# source://syntax_tree//lib/syntax_tree/node.rb#10105
class SyntaxTree::WhileMod < ::SyntaxTree::Node
  # @return [WhileMod] a new instance of WhileMod
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#10114
  def initialize(statement:, predicate:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10121
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10125
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#10112
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10125
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10131
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10140
  def format(q); end

  # [untyped] the expression to be checked
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#10109
  def predicate; end

  # [untyped] the expression to be executed
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#10106
  def statement; end
end

# WithEnvironment is a module intended to be included in classes inheriting
# from Visitor. The module overrides a few visit methods to automatically keep
# track of local variables and arguments defined in the current environment.
# Example usage:
#   class MyVisitor < Visitor
#     include WithEnvironment
#
#     def visit_ident(node)
#       # Check if we're visiting an identifier for an argument, a local
#       variable or something else
#       local = current_environment.find_local(node)
#
#       if local.type == :argument
#         # handle identifiers for arguments
#       elsif local.type == :variable
#         # handle identifiers for variables
#       else
#         # handle other identifiers, such as method names
#       end
#   end
#
# source://syntax_tree//lib/syntax_tree/visitor/with_environment.rb#24
module SyntaxTree::WithEnvironment
  # source://syntax_tree//lib/syntax_tree/visitor/with_environment.rb#25
  def current_environment; end

  # source://syntax_tree//lib/syntax_tree/visitor/with_environment.rb#101
  def visit_blockarg(node); end

  # Visits for nodes that create new environments, such as classes, modules
  # and method definitions
  #
  # source://syntax_tree//lib/syntax_tree/visitor/with_environment.rb#39
  def visit_class(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/with_environment.rb#55
  def visit_def(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/with_environment.rb#63
  def visit_def_endless(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/with_environment.rb#59
  def visit_defs(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/with_environment.rb#94
  def visit_kwrest_param(node); end

  # When we find a method invocation with a block, only the code that happens
  # inside of the block needs a fresh environment. The method invocation
  # itself happens in the same environment
  #
  # source://syntax_tree//lib/syntax_tree/visitor/with_environment.rb#50
  def visit_method_add_block(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/with_environment.rb#43
  def visit_module(node); end

  # Visit for keeping track of local arguments, such as method and block
  # arguments
  #
  # source://syntax_tree//lib/syntax_tree/visitor/with_environment.rb#69
  def visit_params(node); end

  # Visit for keeping track of local variable definitions
  #
  # source://syntax_tree//lib/syntax_tree/visitor/with_environment.rb#109
  def visit_pinned_var_ref(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/with_environment.rb#87
  def visit_rest_param(node); end

  # Visit for keeping track of local variable definitions
  #
  # source://syntax_tree//lib/syntax_tree/visitor/with_environment.rb#109
  def visit_var_field(node); end

  # Visits for keeping track of variable and argument usages
  #
  # source://syntax_tree//lib/syntax_tree/visitor/with_environment.rb#122
  def visit_var_ref(node); end

  # source://syntax_tree//lib/syntax_tree/visitor/with_environment.rb#29
  def with_new_environment; end

  private

  # source://syntax_tree//lib/syntax_tree/visitor/with_environment.rb#138
  def add_argument_definitions(list); end
end

# Word represents an element within a special array literal that accepts
# interpolation.
#
#     %W[a#{b}c xyz]
#
# In the example above, there would be two Word nodes within a parent Words
# node.
#
# source://syntax_tree//lib/syntax_tree/node.rb#10174
class SyntaxTree::Word < ::SyntaxTree::Node
  # @return [Word] a new instance of Word
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#10180
  def initialize(parts:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10190
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10194
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#10178
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10194
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10200
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10204
  def format(q); end

  # @return [Boolean]
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#10186
  def match?(pattern); end

  # [Array[ StringEmbExpr | StringDVar | TStringContent ]] the parts of the
  # word
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#10175
  def parts; end
end

# Words represents a string literal array with interpolation.
#
#     %W[one two three]
#
# source://syntax_tree//lib/syntax_tree/node.rb#10214
class SyntaxTree::Words < ::SyntaxTree::Node
  # @return [Words] a new instance of Words
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#10223
  def initialize(beginning:, elements:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10230
  def accept(visitor); end

  # [WordsBeg] the token that opens this array literal
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#10215
  def beginning; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10234
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#10221
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10234
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10240
  def deconstruct_keys(_keys); end

  # [Array[ Word ]] the elements of this array
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#10218
  def elements; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10249
  def format(q); end
end

# WordsBeg represents the beginning of a string literal array with
# interpolation.
#
#     %W[one two three]
#
# In the snippet above, a WordsBeg would be created with the value of "%W[".
# Note that these kinds of arrays can start with a lot of different delimiter
# types (e.g., %W| or %W<).
#
# source://syntax_tree//lib/syntax_tree/node.rb#10281
class SyntaxTree::WordsBeg < ::SyntaxTree::Node
  # @return [WordsBeg] a new instance of WordsBeg
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#10284
  def initialize(value:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10289
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10293
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10293
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10299
  def deconstruct_keys(_keys); end

  # [String] the start of the word literal array
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#10282
  def value; end
end

# XString represents the contents of an XStringLiteral.
#
#     `ls`
#
# source://syntax_tree//lib/syntax_tree/node.rb#10310
class SyntaxTree::XString < ::SyntaxTree::Node
  # @return [XString] a new instance of XString
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#10313
  def initialize(parts:, location:); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10318
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10322
  def child_nodes; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10322
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10328
  def deconstruct_keys(_keys); end

  # [Array[ StringEmbExpr | StringDVar | TStringContent ]] the parts of the
  # xstring
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#10311
  def parts; end
end

# XStringLiteral represents a string that gets executed.
#
#     `ls`
#
# source://syntax_tree//lib/syntax_tree/node.rb#10339
class SyntaxTree::XStringLiteral < ::SyntaxTree::Node
  # @return [XStringLiteral] a new instance of XStringLiteral
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#10345
  def initialize(parts:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10351
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10355
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#10343
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10355
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10361
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10365
  def format(q); end

  # [Array[ StringEmbExpr | StringDVar | TStringContent ]] the parts of the
  # xstring
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#10340
  def parts; end
end

# Yield represents using the +yield+ keyword with arguments.
#
#     yield value
#
# source://syntax_tree//lib/syntax_tree/node.rb#10377
class SyntaxTree::Yield < ::SyntaxTree::Node
  # @return [Yield] a new instance of Yield
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#10383
  def initialize(arguments:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10389
  def accept(visitor); end

  # [Args | Paren] the arguments passed to the yield
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#10378
  def arguments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10393
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#10381
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10393
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10399
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10403
  def format(q); end
end

# Yield0 represents the bare +yield+ keyword with no arguments.
#
#     yield
#
# source://syntax_tree//lib/syntax_tree/node.rb#10427
class SyntaxTree::Yield0 < ::SyntaxTree::Node
  # @return [Yield0] a new instance of Yield0
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#10433
  def initialize(value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10439
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10443
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#10431
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10443
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10449
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10453
  def format(q); end

  # [String] the value of the keyword
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#10428
  def value; end
end

# ZSuper represents the bare +super+ keyword with no arguments.
#
#     super
#
# source://syntax_tree//lib/syntax_tree/node.rb#10463
class SyntaxTree::ZSuper < ::SyntaxTree::Node
  # @return [ZSuper] a new instance of ZSuper
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#10469
  def initialize(value:, location:, comments: T.unsafe(nil)); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10475
  def accept(visitor); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10479
  def child_nodes; end

  # [Array[ Comment | EmbDoc ]] the comments attached to this node
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#10467
  def comments; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10479
  def deconstruct; end

  # source://syntax_tree//lib/syntax_tree/node.rb#10485
  def deconstruct_keys(_keys); end

  # source://syntax_tree//lib/syntax_tree/node.rb#10489
  def format(q); end

  # [String] the value of the keyword
  #
  # source://syntax_tree//lib/syntax_tree/node.rb#10464
  def value; end
end
