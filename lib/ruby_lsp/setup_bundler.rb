# typed: strict
# frozen_string_literal: true

require "sorbet-runtime"
require "bundler"
require "fileutils"

# This file is a script that will configure a custom bundle for the Ruby LSP. The custom bundle allows developers to use
# the Ruby LSP without including the gem in their application's Gemfile while at the same time giving us access to the
# exact locked versions of dependencies.

module RubyLsp
  class SetupBundler
    extend T::Sig

    sig { params(project_path: String).void }
    def initialize(project_path)
      @project_path = project_path
      @dependencies = T.let(load_dependencies, T::Hash[String, T.untyped])
      @custom_bundle_dependencies = T.let(
        if File.exist?(".ruby-lsp/Gemfile.lock")
          Bundler::LockfileParser.new(Bundler.read_file(".ruby-lsp/Gemfile.lock")).dependencies
        else
          {}
        end,
        T::Hash[String, T.untyped],
      )
    end

    sig { void }
    def setup!
      # Do not setup a custom bundle if we're working on the Ruby LSP, since it's already included by default
      if File.basename(@project_path) == "ruby-lsp"
        warn("Ruby LSP> Skipping custom bundle setup since we're working on the Ruby LSP itself")
        run_bundle_install
        return
      end

      # Do not setup a custom bundle if both `ruby-lsp` and `debug` are already in the Gemfile
      if @dependencies["ruby-lsp"] && @dependencies["debug"]
        warn("Ruby LSP> Skipping custom bundle setup since both `ruby-lsp` and `debug` are already in the Gemfile")

        # If the user decided to add the `ruby-lsp` and `debug` to their Gemfile after having already run the Ruby LSP,
        # then we need to remove the `.ruby-lsp` folder, otherwise we will run `bundle install` for the top level and
        # try to execute the Ruby LSP using the custom bundle, which will fail since the gems are not installed there
        FileUtils.rm_r(".ruby-lsp") if Dir.exist?(".ruby-lsp")
        run_bundle_install
        return
      end

      # Automatically create and ignore the .ruby-lsp folder for users
      FileUtils.mkdir(".ruby-lsp") unless Dir.exist?(".ruby-lsp")
      File.write(".ruby-lsp/.gitignore", "*") unless File.exist?(".ruby-lsp/.gitignore")

      # Write the custom `.ruby-lsp/Gemfile` if it doesn't exist or if the content doesn't match
      content = custom_gemfile_content

      unless File.exist?(".ruby-lsp/Gemfile") && File.read(".ruby-lsp/Gemfile") == content
        File.write(".ruby-lsp/Gemfile", content)
      end

      # If .ruby-lsp/Gemfile.lock already exists and the top level Gemfile.lock hasn't been modified since it was last
      # updated, then we're ready to boot the server
      if File.exist?(".ruby-lsp/Gemfile.lock") &&
          File.stat(".ruby-lsp/Gemfile.lock").mtime > File.stat("Gemfile.lock").mtime
        warn("Ruby LSP> Skipping custom bundle setup since .ruby-lsp/Gemfile.lock already exists and is up to date")
        run_bundle_install(".ruby-lsp/Gemfile")
        return
      end

      FileUtils.cp("Gemfile.lock", ".ruby-lsp/Gemfile.lock")
      run_bundle_install(".ruby-lsp/Gemfile")
    end

    private

    sig { returns(String) }
    def custom_gemfile_content
      parts = [
        "# This custom gemfile is automatically generated by the Ruby LSP.",
        "# It should be automatically git ignored, but in any case: do not commit it to your repository.",
        "",
        "eval_gemfile(File.expand_path(\"../Gemfile\", __dir__))",
      ]

      unless @dependencies["ruby-lsp"]
        parts << 'gem "ruby-lsp", require: false, group: :development, source: "https://rubygems.org"'
      end

      unless @dependencies["debug"]
        parts << 'gem "debug", require: false, group: :development, platforms: :mri, source: "https://rubygems.org"'
      end

      parts.join("\n")
    end

    sig { returns(T::Hash[String, T.untyped]) }
    def load_dependencies
      # We need to parse the Gemfile.lock manually here. If we try to do `bundler/setup` to use something more
      # convenient, we may end up with issues when the globally installed `ruby-lsp` version mismatches the one included
      # in the `Gemfile`
      dependencies = Bundler::LockfileParser.new(Bundler.read_file("Gemfile.lock")).dependencies

      # When working on a gem, the `ruby-lsp` might be listed as a dependency in the gemspec. We need to make sure we
      # check those as well or else we may get version mismatch errors
      gemspec_path = Dir.glob("*.gemspec").first
      if gemspec_path
        gemspec_dependencies = Bundler.load_gemspec(gemspec_path).dependencies.to_h { |dep| [dep.name, dep] }
        dependencies.merge!(gemspec_dependencies)
      end

      dependencies
    end

    sig { params(bundle_gemfile: T.untyped).void }
    def run_bundle_install(bundle_gemfile = nil)
      # If the user has a custom bundle path configured, we need to ensure that we will use the absolute and not
      # relative version of it when running `bundle install`. This is necessary to avoid installing the gems under the
      # `.ruby-lsp` folder, which is not the user's intention. For example, if the path is configured as `vendor`, we
      # want to install it in the top level `vendor` and not `.ruby-lsp/vendor`
      path = Bundler.settings["path"]

      command = +""
      # Use the absolute `BUNDLE_PATH` to prevent accidentally creating unwanted folders under `.ruby-lsp`
      command << "BUNDLE_PATH=#{File.expand_path(path, Dir.pwd)} " if path
      command << "BUNDLE_GEMFILE=#{bundle_gemfile} " if bundle_gemfile

      # If both `ruby-lsp` and `debug` are already in the Gemfile, then we shouldn't try to upgrade them or else we'll
      # produce undesired source control changes. If the custom bundle was just created and either `ruby-lsp` or `debug`
      # weren't a part of the Gemfile, then we need to run `bundle install` for the first time to generate the
      # Gemfile.lock with them included or else Bundler will complain that they're missing. We can only update if the
      # custom `.ruby-lsp/Gemfile.lock` already exists and includes both gems
      if (@dependencies["ruby-lsp"] && @dependencies["debug"]) ||
          @custom_bundle_dependencies["ruby-lsp"].nil? || @custom_bundle_dependencies["debug"].nil?
        # Install gems using the custom bundle
        command << "bundle install "
      else
        # If ruby-lsp or debug are not in the Gemfile, try to update them to the latest version
        command << "bundle update "
        command << "ruby-lsp " unless @dependencies["ruby-lsp"]
        command << "debug " unless @dependencies["debug"]
      end

      # Redirect stdout to stderr to prevent going into an infinite loop. The extension might confuse stdout output with
      # responses
      command << "1>&2"

      # Add bundle update
      warn("Ruby LSP> Running bundle install for the custom bundle. This may take a while...")
      system(command)
    end
  end
end
